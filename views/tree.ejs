<% include header %>
  <div class="container">
    <!-- <div class="col-sm-12  col-md-12" style="padding-top: 2cm"></div> -->
    <div class="ui segment" style="padding-top: 2cm">
      <div class="ui form">
        <div class="three fields">
          <div class="twelve wide field">
            <div class="ui huge icon input">
              <label for="input-search" class="sr-only">Search Tree:</label>
              <i class="search icon"></i>
              <input type="input" id="input-search" placeholder="Type a concept to search..." value="">
            </div>
          </div>
          <div class="four wide field">
            <div class="ui large radio checkbox">
              <input type="radio" id="chk-ignore-case" name="searchOptions" checked="checked" value="false">
              <label>Ignore Case</label>
            </div>
            <div class="ui large  radio checkbox">
              <input type="radio" id="chk-exact-match" name="searchOptions" value="false">
              <label>Exact Match</label>
            </div>
          </div>
          <div class="six wide field">
            <div class="ui huge floating dropdown labeled icon button" style="background:rgba(255,255,255,.5) none" onclick="getSelectedFileName(this);">
              <i class="filter icon"></i>
              <span class="text">Filter Files</span>
              <div class="menu">
                <div class="ui icon search input">
                  <i class="search icon"></i>
                  <input type="text" placeholder="Select File(s)...">
                </div>
                <div class="divider"></div>
                <div id="itemFiles" class="scrolling menu">
                  <div class="item">
                    <div class="ui red empty circular label"></div>
                    ALL Files
                  </div>
                  <%fileNames.forEach(function (item) {%>
                    <div class="item">
                      <div class="ui blue empty circular label"></div>
                      <%= item %>
                    </div>
                    <%});%>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="inline fields">
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="myRadios" id="RDFSViewCheckBox" value="1" checked="checked">
              <label style="padding-right:50px">RDF(S) View</label>
            </div>
          </div>
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="myRadios" id="SKOSViewCheckBox" value="2">
              <label style="padding-right:50px">SKOS View</label>
            </div>
          </div>
          <div class="field">
            <div class="ui slider checkbox" style="padding-right:50px">
              <input type="checkbox" name="mySliders" id="showTypesCheckBox" tabindex="0">
              <label> Show Concepts Types</label>
            </div>
          </div>
          <div class="field">
            <div class="ui slider checkbox">
              <input type="checkbox" name="mySliders" id="showFilesCheckBox" tabindex="1">
              <label> Show Concepts Files</label>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-sm-12  col-md-6">
      <br/>
      <div id="notFoundMessage" style="display:none">
      </div>
      <div id="tree" class="mygrid-wrapper-div" style="height:400px;width:auto"></div>
    </div>
    <div id="infoTabs" class="col-sm-12 col-md-6" style="padding-top:20px;">
      <div id="externalInfo"></div>
      <ul id="viewList" class="nav nav-tabs" style="display: none">
        <li class="active"><a class="nav-link active" data-toggle="tab" id="showExternalInfo" href="#documentation">Documentation</a></li>
        <li><a class="nav-link" data-toggle="tab" id="sourceCodeTab" href="#sourceCode">Turtle source</a></li>
        <li><a class="nav-link" data-toggle="tab" id="graphTab" href="#showGraph">Concept graph</a></li>
      </ul>
      <div class="tab-content">
        <div class="tab-pane active" id="documentation" role="tabpanel">
          <div id="infoDetails" class="mygrid-wrapper-div" style="height:400px;width:auto">
            <h4 id="conceptHead" style="display: none; margin-top:9px">Concept Details:</h4>
            <div id="detailTable"></div>
            <div id="domainTable" style="display: none"></div>
            <div id="rangeTable" style="display: none"></div>
            <div id="instancesTable" style="display: none"></div>
            <h4 id="instanceHead" style="display: none; margin-top:9px"></h4>
            <div id="instanceDetailsTable" style="display: none"></div>
          </div>
        </div>
        <div class="tab-pane" class="tabContent" id="sourceCode" role="tabpanel">
          <h4 style="margin-top:9px">Source Code:</h4>
          <div class="mygrid-wrapper-div" style="height:658px;width:auto">
            <textarea id="code" name="code" class="form-control" rows="30" wrap="hard"></textarea>
          </div>
        </div>
        <div class="tab-pane" class="tabContent" id="showGraph" role="tabpanel">
          <h4 style="margin-top:9px">Graph Representation:</h4>
          <div id='graph' class="mygrid-wrapper-div" style="height:658px;width:auto"></div>
        </div>
      </div>
    </div>
  </div>
  <% include footer %>
    <!-- End of expressJS coding-->

    <!-- Start of javascript coding-->
    <script>
      // get all the data from route.tree.js
      var viewDataRendered = <%- JSON.stringify(data) %>;
      var SKOSData = <%- JSON.stringify(SKOSData) %>;
      var currentTreeData = viewDataRendered;
      var mixConcepts = <%- JSON.stringify(allRDFObjects) %>;
      var isfileNameSelected = false;
      var currentFiles = <%- JSON.stringify(fileNames) %>;
      var RDFObjPlusURI = <%- JSON.stringify(RDFObjectsPlusURI) %>;
      // show SKOS concepts on treeview
      console.log(mixConcepts);

      function showSKOSTree() {
        var viewData = SKOSData;
        currentTreeData = SKOSData; // set as current data tree to check for types or files show checkbox clicks
        // control checkboxes FilesCheckBox and TypesCheckBox
        var viewData = currentTreeData; //TODO: get this data with AJAX request.
        if (isCheckedshowFilesCheckBox)
          $('#showTypesCheckBox').prop('checked', false);
        if (isCheckedshowTypesCheckBox)
          $('#showFilesCheckBox').prop('checked', false);

        var allParents = getUniqueParents(viewData);
        var data = [];
        var j = 0;
        for (var i = 0; i < allParents.length; i++) {
          if (allParents[i])
            data[j++] = getParentWithChildren(viewData, allParents[i], "SKOS");
        }
        if ($('#showTypesCheckBox').is(':checked')) {
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes'))
              for (var j = 0; j < data[i].nodes.length; j++) {
                data[i].nodes[j].text = data[i].nodes[j].child;
                data[i].nodes[j].text += '<div  class="ui teal tag label">' + data[i].nodes[j].RDFType + '</div>';
              }
          }
        } else if ($('#showFilesCheckBox').is(':checked')) {
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes'))
              for (var j = 0; j < data[i].nodes.length; j++) {
                data[i].nodes[j].text = data[i].nodes[j].child;
                data[i].nodes[j].text += '<div  class="ui pink tag label">' + data[i].nodes[j].fileName + '</div>';
              }
          }

        } else {
          // set node.text to child from JSON
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes'))
              for (var j = 0; j < data[i].nodes.length; j++) {
                data[i].nodes[j].text = data[i].nodes[j].child;
              }
          }

        }

        // sorting the tree before viewing
        data.sort(function(a, b) {
          return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b.text.toLowerCase()) ? 1 : -1));
        });
        // make array unique
        data = uniqueArray(data);

        // rebuild tree with the new SKOS data
        rebuildTree(data);
      }

      // // get concpt from URI for some concepts
      // mixConcepts.forEach(function(item) {
      //   mixConcepts.push(item);
      // });

      /////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////
      //mixConcepts.push("Agent");
      //mixConcepts.push("Place");
      //get skosURI for SKOSChild or SKOSParent
      // function getSKOSURI(str) {
      //   for (var i = 0; i < SKOSData.length; i++) {
      //     if (SKOSData[i].parent === str & SKOSData[i].RDFType === "skos:broader")
      //       return KOSData[i].URI;
      //     if (SKOSData[i].child === str & SKOSData[i].RDFType === "skok:narrower")
      //       return KOSData[i].URI;
      //   }
      // }
      //
      //
      ////////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////
      // get existing concepts to find external concepts
      function getExistInMixConcepts() {
        var array = [];
        mixConcepts.forEach(function(item) {
          for (var i = 0; i < viewDataRendered.length; i++) {
            if (item === viewDataRendered[i].concept) {
              array.push(item);
            }
          }
        });
        return array;
      }

      var internalConcepts = getExistInMixConcepts();
      // some external concepts was not in the first results.json file
      var externalConcepts = $(mixConcepts).not(internalConcepts).get();
      console.log("externalConcepts" + externalConcepts);
      debugger;

      // store the selected concept
      var conceptSelected = "";

      // initilaiztion of ui elements
      $('.ui.radio.checkbox').checkbox();
      $('.ui.dropdown').dropdown();

      // show full tree for the first time
      // since RDFS checkbox is clicked by default
      showRDFSTree();

      // check for radios RDFS or SKOS Views
      $('input:radio')
        .on('change', function(event) {
          if ($(this).prop('checked')) {
            if ($(this).attr('id') == 'SKOSViewCheckBox') {
              $('#itemFiles').html("");
              $('#infoTabs').hide();
              showSKOSTree();
            }
            if ($(this).attr('id') == 'RDFSViewCheckBox') {
              location.reload();
              //$('#infoTabs').hide();
              //currentTreeData = viewDataRendered;
              //showFullTree();
            }
          }
        });

      // make unique concept in  tree
      function uniqueArray(array) {
        var a = array.concat();
        for (var i = 0; i < a.length; i++) {
          for (var j = i + 1; j < a.length; j++) {
            if (a[i].text === a[j].text) {
              a.splice(j--, 1);
            }
          }
        }
        return a;
      }

      // show info. for external Concepts and thier instaces
      function showExternalInfo(str) {
        var ExteralURI = getExternalURI(str);
        if (ExteralURI) {
          var externalURITable = '<table class="table table-striped" >' +
            '<colgroup> <col class="col-md-4"> </colgroup>' +
            '<tr>' +
            '<th> This concept is outside this Ontology :</th>' +
            '</tr>';
          var link = '<a href=' + ExteralURI + '>' + ExteralURI + '</a>';
          externalURITable += '<tr>    <td> For more details click the link  below <br/>' + link + '</td>  </tr>';
          externalURITable += '</table>';
          $('#viewList').show();
          $('a[href="#documentation"]').click();
          $('#sourceCodeTab').hide();
          $('#graphTab').hide();
          $('#infoDetails').show();
          $("#domainTable").hide();
          $("#rangeTable").hide();
          $("#rangeTable").hide();
          $("#instancesTable").html("");
          $("#instancesTable").hide();
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#conceptHead").show();
          $("#conceptHead").html('<p > Concept Details for :<code>' + trimHash(trimSlash(ExteralURI)) + '</code></p>');
          $('#detailTable').html(externalURITable);
          var endpoint = "http://localhost:3030/ds/sparql?query=";
          var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(ExteralURI) + '> }';
          var method = "POST";
          //  async = true.
          var async = true;
          var request = new XMLHttpRequest();
          request.onload = function() {
            var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
            var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
            var instances = data.results.bindings;
            if (instances[0] != null) {
              var instancesTable = '<table class="table table-striped" >' +
                '<colgroup> <col class="col-md-4"> </colgroup>' +
                '<tr>' +
                '<th>Instances</th>' +
                '</tr>';
              for (var i = 0; i < instances.length; i++) {
                var instanceURI = instances[i]["s"].value;
                var key1 = trimSlash(instances[i]["s"].value);
                key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';
                instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
              }
              instancesTable += '</table> ';
              $("#instancesTable").show();
              $("#instancesTable").html(instancesTable);
            } else {
              $("#instancesTable").html("");
              $("#instancesTable").hide();
              $("#instanceHead").hide();
              $("#instanceDetailsTable").hide();

            }
          }
          request.open(method, endpoint + querystring, true);
          request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
          // send the request to the server.
          request.send();
        } else {
          infoTabs
          $('#viewList').hide();
          $('#infoDetails').hide();
          $("#externalInfo").show();
          $("#externalInfo").html('<p > Concept is External still has no URI</p>');
        }
      }
      var isCheckedshowTypesCheckBox;
      var isCheckedshowFilesCheckBox;
      //show treeview with types or files
      function showRDFSTypesAndFiles() {
        //event.preventDefault();
        var viewData = currentTreeData; //TODO: get this data with AJAX request.
        if (isCheckedshowFilesCheckBox)
          $('#showTypesCheckBox').prop('checked', false);
        if (isCheckedshowTypesCheckBox)
          $('#showFilesCheckBox').prop('checked', false);

        for (var i = 0; i < viewData.length; i++) {
          viewData[i].text = viewData[i].concept;
        }
        if (isCheckedshowFilesCheckBox) {
          for (var i = 0; i < viewData.length; i++) {
            viewData[i].text = viewData[i].concept + '<div  class="ui pink tag label">' + viewData[i].fileName + '</div>';
          }
        }
        if (isCheckedshowTypesCheckBox) {
          for (var i = 0; i < viewData.length; i++) {
            viewData[i].text = viewData[i].concept + '<div   class="ui teal tag label">' + viewData[i].RDFType + '</div>';
          }
        }
        var allParents = getUniqueParents(viewData);
        var data = [];
        var j = 0;
        for (var i = 0; i < allParents.length; i++) {
          if (allParents[i])
            data[j++] = getParentWithChildren(viewData, allParents[i]);
        }
        console.log(externalConcepts);

        if (!isfileNameSelected) {
          for (var i = 0; i < externalConcepts.length; i++) {
            data[j++] = getExternals(externalConcepts[i]);
          }
        }
        for (var i = 0; i < viewData.length; i++) {
          data[j++] = viewData[i];
        }
        // make array unique
        data = uniqueArray(data);
        // sorting the tree before viewing
        data.sort(function(a, b) {
          return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b.text.toLowerCase()) ? 1 : -1));
        });

        // rebuild tree with the new data
        rebuildTree(data);
      }

      // regenerate the tree according to the new data
      function rebuildTree(data) {
        $('#tree').treeview({
          data: data, // data is not optional
          levels: 5,
          enableLinks: true,
          icon: "glyphicon glyphicon-chevron-right",
          selectedIcon: "glyphicon glyphicon-chevron-right",
          onNodeSelected: function(event, node) {
            if (node.hasOwnProperty('child')) { // child right now only a property for SKOS object
              var str;
              if (node.text.includes("<")) {
                var parentNode = node.text;
                parentNode = parentNode.split('<');
                str = parentNode[0];
              } else {
                str = node.text;
              }
              $('#externalInfo').hide();

              // display infoTabs and graph and documentation
              exec(node.URI, "SKOS");
              // show source code
              showTurtleSource(node.URI, "SKOS");

            } else {
              if (node.concept) {
                event.stopPropagation();
                $('#externalInfo').hide();
                $('#infoDetails').show();
                $('#viewList').show();
                exec(node.concept);
                showInstances(node.concept);
                showTurtleSource(node.concept);
                conceptSelected = node.concept;
              } else {
                var parentNode = node.text;
                if (parentNode.includes("<")) //check if contains hmt <div>
                {
                  if (parentNode.includes("External")) {
                    parentNode = parentNode.split('<');
                    parentNode = parentNode[0];
                    $('#externalInfo').hide();
                    showExternalInfo(parentNode);
                  } else {
                    var str;
                    // catch SKOS parent nodes of the tree
                    if (node.text.includes("<")) {
                      var parentNode = node.text;
                      parentNode = parentNode.split('<');
                      str = parentNode[0];
                    } else {
                      str = node.text;
                    }
                    $('#externalInfo').hide();

                    // display infoTabs and graph and documentation
                    exec(node.nodes[0].URI, "SKOS");
                    // show source code
                    showTurtleSource(node.nodes[0].URI, "SKOS");
                    // parentNode = parentNode.split('<');
                    // parentNode = parentNode[0];
                    // alert("Inside parent"+parentNode)
                    // console.log(node);
                    // event.stopPropagation();
                    // $('#externalInfo').hide();
                    // $('#infoDetails').show();
                    // $('#viewList').show();
                    // exec(parentNode);
                    // showInstances(parentNode);
                    // showTurtleSource(parentNode);
                    // conceptSelected =parentNode;
                  }
                } else if (isConceptAvailable(parentNode)) //parent node inside our ontology
                {
                  event.stopPropagation();
                  $('#externalInfo').hide();
                  $('#infoDetails').show();
                  $('#viewList').show();
                  exec(parentNode);
                  showInstances(parentNode);
                  showTurtleSource(parentNode);
                  conceptSelected = parentNode;
                } else {
                  $('#externalInfo').hide();
                  showExternalInfo(parentNode);
                }

              }
            }
          }
        });
      }

      // check if showType or showfile checkboxes were clicked
      $('input:checkbox')
        .on('change', function(event) {
          event.preventDefault();
          isCheckedshowFilesCheckBox = ($(this).prop('checked') && $(this).attr('id') == 'showFilesCheckBox') ? true : false;
          isCheckedshowTypesCheckBox = ($(this).prop('checked') && $(this).attr('id') == 'showTypesCheckBox') ? true : false;
          if ($('#SKOSViewCheckBox').is(':checked')) {
            $('#infoTabs').hide();
            showSKOSTree();
          } else {
            showRDFSTree();
          }
        });

      // declartion of show tree function
      function showRDFSTree() {
        $('#notFoundMessage').hide();
        $("#tree").show();
        showRDFSTypesAndFiles();
      }

      //show concept was not found as a message
      function conceptNotFoundMessage() {
        <% include notFoundMessage %> // import from notFoundMessage.ejs file
      }

      // To hide element from page
      function hide(element) {
        if (element = 'ALL') {
          $('#instanceHead').hide();
          $('#viewList').hide();
          $('#instanceDetailsTable').hide();
          $('#conceptHead').hide();
          $('#infoDetails').hide();
          $('#showGraph').hide();
          $('#tree').hide();
        }
      }

      // Init a timeout variable to be used below
      var timeout = null;
      // Instant search on fly on concept
      var search = function(e) {
        clearTimeout(timeout);
        // Make a new timeout set to go off in 800ms
        var pattern = $('#input-search').val();
        var options = {
          ignoreCase: $('#chk-ignore-case').is(':checked'),
          exactMatch: $('#chk-exact-match').is(':checked'),
        };
        var results = $('#tree').treeview('search', [pattern, options]);
        currentTreeData = results;
        // rebuild the tree with the search pattern
        rebuildTree(results);
        timeout = setTimeout(function() {
          if (results.length == 0)
            conceptNotFoundMessage();
        }, 500);
        if ($('#input-search').val() == '')
          location.reload();
      }

      // conceptNotFoundMessage();
      $('#input-search').on('keyup', search);
      // remove redundant parents from tree
      function getUniqueParents(data) {
        var unique = [...new Set(data.map(item => item.parent))];
        return unique;
      }

      // get nodes which are parents and have children
      function getParentWithChildren(data, parent, str) {
        var children = [];
        for (var i = 0; i < data.length; i++) {
          if (data[i].parent === parent)
            children.push(data[i]);
        }
        if (isConceptAvailable(parent))
          var parentNode = parent;
        else if (str == "SKOS")
          var parentNode = parent + '<div class="ui left pointing red basic label" text-align: right>  SKOS Parent </div>';
        else
          var parentNode = parent + '<div class="ui left pointing blue basic label">  External </div>';

        var node = {
          text: parentNode,
          nodes: children
        };
        return node;
      }

      // get nodes which are parents
      function getExternals(data) {
        var node = {
          text: data + '<div class="ui left pointing blue basic label"> External </div>'
        };
        return node;
      }

      // get elements of the tree to display either filtered by file or without
      function getTreeData(propertyName, selectedFileName, view) {
        isfileNameSelected = false; // to remove external from the show
        if (selectedFileName)
          selectedFileName = selectedFileName.trim();
        // search in RDFSDATA
        if (propertyName === "ALL Files" && view === "SKOS")
          showSKOSTree();
        else
          showRDFSTree();
        var viewData = viewDataRendered; //TODO: get this data with AJAX request.
        for (var i = 0; i < viewData.length; i++) {
          if (viewData[i].concept)
            viewData[i].text = viewData[i].concept;
          var allParents = getUniqueParents(viewData);
          var data = [];
          var j = 0;
          for (var i = 0; i < allParents.length; i++) {
            if (allParents[i])
              data[j++] = getParentWithChildren(viewData, allParents[i]);
          }
          for (var i = 0; i < viewData.length; i++) {
            data[j++] = viewData[i];
          }
        }
        if (propertyName && selectedFileName) {
          isfileNameSelected = true; // to remove external from the show
          var filteredData = [];
          var k = 0;
          for (var i = 0; i < data.length; i++) {
            if (data[i][propertyName])
              if (data[i][propertyName].trim() === selectedFileName) {
                filteredData[k] = data[i];
                k++;
              }
          }
          var allParentsFromFiles = getUniqueParents(filteredData);
          var dataFiles = [];
          var j = 0;
          for (var i = 0; i < allParentsFromFiles.length; i++) {
            if (allParentsFromFiles[i])
              dataFiles[j++] = getParentWithChildren(filteredData, allParentsFromFiles[i]);
          }
          for (var i = 0; i < filteredData.length; i++) {
            dataFiles[j++] = filteredData[i];
          }
          data = dataFiles;
        }

        return data;

      }

      // Get the word after slash char of a string
      function trimSlash(str) {
        if (str.includes("/")) {
          var n = str.split("/").pop(-1);;
          return n;
        } else {
          return str;
        }
      }

      // Get the word after hash char of a string
      function trimHash(str) {
        if (str.includes("#")) {
          var n = str.split('#');;
          var p = n[n.length - 1];
          return p;
        } else {
          return str;
        }
      }

      // Customization of the RDF type to show as in standards
      function replaceWithRDFType(str) {
        if (str.includes("22-rdf-syntax-ns")) {
          return "rdf:" + trimHash(str);
        } else if (str.includes('rdf-schema'))
          return "rdfs:" + trimHash(str);
        else if (str.includes('owl'))
          return "owl:" + trimHash(str);
        else
          return str;
      }

      //check if concept is in our ontology or external
      function isConceptAvailable(str) {
        for (var i = 0; i < viewDataRendered.length; i++) {
          if (str === viewDataRendered[i].concept)
            return true;
        }
        return false;
      }

      // check if the concept is external
      function isConceptExternal(str) {
        for (var i = 0; i < externalConcepts.length; i++) {
          if (str === externalConcepts[i]) {
            return true;
          }
        }
        return false;
      }

      // get externalURI
      function getExternalURI(str) {
        for (var i = 0; i < RDFObjPlusURI.length; i++) {
          if (str === RDFObjPlusURI[i].object)
            return RDFObjPlusURI[i].URI;
        }
        return;
      }

      // update dropDownMenu with SKOS fileNames
      function getSKOSFiles() {
        $('#itemFiles').html('');
        var SKOSFiles = [];
        for (var i = 0; i < SKOSData.length; i++) {
          if (SKOSData[i].fileName)
            SKOSFiles.push(SKOSData[i].fileName);
        }
        SKOSFiles = [...new Set(SKOSFiles.map(item => item))];
        $('#itemFiles').append('<div  class="item"><div class="ui red empty circular label"></div> ALL Files</div>');
        SKOSFiles.forEach(function(item) {
          $('#itemFiles').append('<div class="item"><div class="ui blue empty circular label"></div> ' + item + ' </div>');
        });
        $('.ui.dropdown').dropdown("refresh");
      }

      // get selected fileNames for dropDownMenu and rebuild treeview
      function getSelectedFileName(e) {
        var selectedFileName = $('.ui.dropdown').dropdown('get text');
        selectedFileName = selectedFileName.trim();
        // update with SKOS files if SKOSViewCheckBox is clicked
        if ($('#SKOSViewCheckBox').is(':checked')) {
          getSKOSFiles();
        }
        ////
        if (selectedFileName != "Filter Files") {
          $('#infoTabs').hide(); //hide previos infoTabs
          var text = selectedFileName;
          if (text)
            text = text.trim();
          if (text === "ALL Files") {
            // if ($('#SKOSViewCheckBox').is(':checked')) {
            //   currentTreeData = getTreeData('ALL Files', text, "SKOS");
            //   showSKOSTree();
            // } else {
            currentTreeData = getTreeData();
            showRDFSTypesAndFiles();
            // }
          } else {
            $('#infoTabs').hide(); //hide previos infoTabs
            currentTreeData = getTreeData('fileName', text);
            showRDFSTypesAndFiles();
          }
        }
      }

      // show info. details of clicked instance
      function showInstanceDetails(instanceURI) {
        var endpoint = "http://localhost:3030/ds/sparql?query=";
        var querystring = 'SELECT  ?p ?o WHERE {  <' + encodeURIComponent(instanceURI) + '> ?p ?o }';
        var method = "POST";
        // async = true.
        var async = true;
        var request = new XMLHttpRequest();
        request.onload = function() {
          var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
          var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
          var instances = data.results.bindings;
          if (instances[0] != null) {
            var instancesDetailsTable = '<table class="table table-striped" >' +
              '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
              '<tr>' +
              '<th>Predicate</th>' +
              '<th>Object</th>' +
              '</tr>';
            for (var i = 0; i < instances.length; i++) {
              var key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
              var key2 = trimHash(replaceWithRDFType(trimSlash(instances[i]['o'].value)));
              // some modifications to display the data on domumentation in nice way
              if (isConceptAvailable(key1)) {
                key1 = '<a href="#" onmousedown="exec(&quot;' + key1 + '&quot;); return false; ">' + key1 + '</a>';
              }
              if (isConceptAvailable(key2)) {
                key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              instancesDetailsTable += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            }
            instancesDetailsTable += '</table> ';
            $("#instanceHead").show();
            $("#instanceHead").html('<p > Instance Details for :<code>' + trimSlash(instanceURI) + '</code></p>');
            $("#instanceDetailsTable").show();
            $("#instanceDetailsTable").html(instancesDetailsTable);
            $("#infoDetails").scrollTop($("#infoDetails")[0].scrollHeight);

          } else {
            //alert('no instances');
            $("#instanceHead").html("");
            $("#instanceDetailsTable").html("");
            $("#instanceHead").hide();
            $("#instanceDetailsTable").hide();
          }
        }
        request.open(method, endpoint + querystring, true);
        request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
        //send the request to the server.
        request.send();
      }

      // To display instances of  the selected node
      function showInstances(item) {
        var conceptURI;
        var isURIExist = false;
        if (item) {
          for (var i = 0; i < viewDataRendered.length; i++) {
            if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
              conceptURI = viewDataRendered[i].URI;
              isURIExist = true;
              break;
            }
          }
          if (isURIExist) {
            var endpoint = "http://localhost:3030/ds/sparql?query=";
            var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(conceptURI) + '> }';
            var method = "POST";
            // You REALLY want async = true.
            var async = true;
            var request = new XMLHttpRequest();
            request.onload = function() {
              var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
              var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
              var instances = data.results.bindings;
              if (instances[0] != null) {
                var instancesTable = '<table class="table table-striped" >' +
                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                  '<tr>' +
                  '<th>Instances</th>' +
                  '</tr>';
                //  console.log(instances);
                for (var i = 0; i < instances.length; i++) {
                  var instanceURI = instances[i]["s"].value;
                  var key1 = trimSlash(instances[i]["s"].value);
                  key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';
                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                }
                instancesTable += '</table> ';
                $("#instancesTable").show();
                $("#instancesTable").html(instancesTable);
              } else {
                $("#instancesTable").html("");
                $("#instancesTable").hide();
                $("#instanceHead").hide();
                $("#instanceDetailsTable").hide();
              }
            }
            request.open(method, endpoint + querystring, true);
            request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
            // Actually sends the request to the server.
            request.send();
          } else
            $("#instancesTable").html('<p>No node was selected !!!</p>');
        }
      }

      // To display Turtle source for the selected node
      function showTurtleSource(item, view) {
        var conceptURI;
        var isURIExist = false;
        if (view == "SKOS") {
          conceptURI = item;
          isURIExist = true;
        } else {
          if (item) {
            for (var i = 0; i < viewDataRendered.length; i++) {
              if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
                conceptURI = viewDataRendered[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else if (conceptSelected) {
            for (var i = 0; i < viewDataRendered.length; i++) {
              if (conceptSelected.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
                conceptURI = viewDataRendered[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else
            isURIExist = false;
        }
        if (isURIExist) {
          var endpoint = "http://localhost:3030/ds/sparql?query="
          var querystring = 'CONSTRUCT{<' + encodeURIComponent(conceptURI) + '> ?p ?o .}WHERE {<' + encodeURIComponent(conceptURI) + '> ?p ?o .}'
          var method = "POST";
          // async = true.
          // Otherwise, it'll block ALL execution waiting for server response.
          var async = true;
          var request = new XMLHttpRequest();
          request.onload = function() {
            var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
            var data = request.responseText; // Returned data, e.g., an HTML document.
            $('#viewList').show();
            $('#sourceCodeTab').show();
            $('#code').html(data);
          }
          request.open(method, endpoint + querystring, true);
          request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded;charset=UTF-8');
          //  send the request to the server.
          request.send();
        } else
          $("#code").html('<p>No node was selected !!!</p>');
      }

      // Fuction to query sparql endpoint return graph and queryResult
      function exec(item, view) {
        var str = "";
        var isURIExist = false;
        var conceptURI;
        conceptSelected = item;
        //highlight highlight node it was not the selected node
        var selectedNode = $('#tree').treeview('getSelected');
        if (selectedNode[0].concept != item && view !== "SKOS") {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoDetails").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          // scroll to the clicked node from documentation and select the node
          const callback = element => element.innerHTML == item;
          const elements = Array.from(document.getElementsByTagName('a'));
          const result = elements.filter(callback);
          var $s = $('#tree');
          //  get nodeid of string node.text
          var liTop = $s.find('[data-nodeid=' + parseInt(result[0].parentNode.dataset.nodeid) + ']').offset().top;
          var ulTop = $s.offset().top;
          // scroll to the selected node
          $s.scrollTop($s.scrollTop() + (liTop - ulTop));
          // select the node of the treeview
          $('#tree').treeview('selectNode', [parseInt(result[0].parentNode.dataset.nodeid), {
            silent: true
          }]);
        }
        if (view === "SKOS") {
          conceptURI = item;
          isURIExist = true;
        } else {
          for (var i = 0; i < viewDataRendered.length; i++) {
            if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
              conceptURI = viewDataRendered[i].URI;
              isURIExist = true;
              break;
            }
          }

        }
        if (isURIExist) {
          var endpoint = "http://localhost:3030/ds/sparql"
          var sparql = 'prefix schema: <http://schema.org/> \n' +
            'prefix owl:   <http://www.w3.org/2002/07/owl#> \n' +
            'prefix xsd:   <http://www.w3.org/2001/XMLSchema#> \n' +
            'prefix voaf:  <http://purl.org/vocommons/voaf#> \n' +
            'prefix skos:  <http://www.w3.org/2004/02/skos/core#> \n' +
            'prefix mv:    <http://eccenca.com/mobivoc/> \n' +
            'prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> \n' +
            'prefix vcard: <http://www.w3.org/2001/vcard-rdf/3.0#> \n' +
            'prefix gr:    <http://purl.org/goodrelations/v1#> \n' +
            'prefix geo:   <http://www.w3.org/2003/01/geo/wgs84_pos#> \n' +
            'prefix s:     <http://schema.org/> \n' +
            'prefix dct:   <http://purl.org/dc/terms/> \n' +
            'prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n' +
            'prefix vCard: <http://www.w3.org/2001/vcard-rdf/3.0#> \n' +
            'prefix foaf:  <http://xmlns.com/foaf/spec/#> \n' +
            'SELECT  ?p ?o WHERE {  <' + conceptURI + '> ?p ?o }  '
          d3sparql.query(endpoint, sparql, render)
        }
      }

      // Function to display data in tables on the page
      function render(json) {
        var dataSPARQL = json.results.bindings;
        var conceptHasRange = "";
        var conceptHasDomain = "";
        var conceptLabel;
        var table = '<table class="table table-striped" >' +
          '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
          '<tr>' +
          '<th>Predicate</th>' +
          '<th>Object</th>' +
          '</tr>';
        var rangeTable = '<table class="table table-striped " >' +
          '<colgroup> <col class="col-md-6"> </colgroup>' +
          '<tr>' +
          '<th>Values expected to be one of these types</th>' +
          '</tr>';
        var domainTable = '<table class="table table-striped " >' +
          '<colgroup> <col class="col-md-6"> </colgroup>' +
          '<tr>' +
          '<th>Used on these types</th>' +
          '</tr>';
        for (var i = 0; i < dataSPARQL.length; i++) {
          var key1 = trimHash(replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value)));
          var key2 = dataSPARQL[i]['o'].value;
          //check if object is uri
          if (key2.includes("http://") && key1.includes("seeAlso")) {
            if (key2.lastIndexOf('/'))
              key2 = key2.slice(0, -1);
            key2 = '<a href=' + key2 + '>' + key2 + '</a>';
          } else
            key2 = trimHash(replaceWithRDFType(trimSlash(key2)));
          var key3 = dataSPARQL[i]['o']['xml:lang'];
          var key4 = dataSPARQL[i]['o']['type'];

          if (key1.includes("domain")) {
            conceptHasDomain = key1;
            if (isConceptAvailable(key2) && key4 === "uri")
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';
          } else if (key1.includes("range")) {
            conceptHasRange = key1;
            if (isConceptAvailable(key2) && key4 === "uri")
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';
          } else {
            if (isConceptExternal(key2) && !key1.includes("label") && key4 === "uri") {
              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            }
            if (isConceptAvailable(key2) && !key1.includes("label") && key4 === "uri") {
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            }
            if (key1.includes("label")) {
              if (key3)
                key2 = key2 + '@' + key3;
            }

            table += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            //debugger;
          }
        }
        //end of tables
        table += '</table> ';
        domainTable += '</table> ';
        rangeTable += '</table> ';
        $('#infoTabs').show();
        //display returned data on the Html tables
        $("#conceptHead").show();
        if (conceptSelected.includes("http://")) { //check if it skosURI
          conceptSelected = trimHash(trimSlash(conceptSelected));
        }
        $("#conceptHead ").html('<p > Concept Details :<code>' + conceptSelected + '</code></p>');
        $("#infoDetails").show();
        $('#viewList').show();

        // domainTable has some values to show
        if (!conceptHasDomain == "")
          $("#domainTable").show();
        else
          $("#domainTable").hide();
        // rangeTable has some values to show
        if (!conceptHasRange == "")
          $("#rangeTable").show();
        else {
          $("#rangeTable").hide();
        }
        $("#detailTable").html(table);
        $("#domainTable").html(domainTable);
        $("#rangeTable").html(rangeTable);
        //To display on graph
        var config = {
          "radius": 20,
          "charge": -100,
          "distance": 10,
          "width": 500,
          "height": 400,
          "selector ": '#showGraph'
        };
        d3sparql.forcegraph(json, config);
        $('#graph').html('');
        $('#graphTab').show();
        $('div.d3sparql.forcegraph').appendTo($('#graph'));
      }

      // To display in TabView
      $(document).ready(function(e) {
        $(document).on('click', 'a[href="#"]', function(e) {
          e.preventDefault();
        });
      });
    </script>
    <!-- End of javascript coding-->
