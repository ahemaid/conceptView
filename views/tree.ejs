<% include header %>
  <div class="container">
    <!-- <div class="col-sm-12  col-md-12" style="padding-top: 2cm"></div> -->
    <div class="ui segment" style="padding-top: 2cm">
      <div class="ui form">
        <div class="three fields">
          <div class="twelve wide field">
            <div class="ui huge icon input">
              <label for="input-search" class="sr-only">Search Tree:</label>
              <i class="search icon"></i>
              <input type="input" id="input-search" placeholder="Type a concept to search..." value="">
            </div>
          </div>
          <div class="four wide field">
            <div class="ui large radio checkbox">
              <input type="radio" id="chk-ignore-case" name="frequency" value="false">
              <label>Ignore Case</label>
            </div>
            <div class="ui large  radio checkbox">
              <input type="radio" id="chk-exact-match" name="frequency" value="false">
              <label>Exact Match</label>
            </div>
          </div>
          <div class="six wide field">
            <div class="ui huge floating dropdown labeled icon button" style="background:rgba(255,255,255,.5) none">
              <i class="filter icon"></i>
              <span class="text">Filter Files</span>
              <div class="menu">
                <div class="ui icon search input">
                  <i class="search icon"></i>
                  <input type="text" placeholder="Select Files...">
                </div>
                <div class="divider"></div>
                <div class="scrolling menu">
                  <div class="item">
                    <div class="ui red empty circular label"></div>
                    ALL Files
                  </div>
                  <%fileNames.forEach(function (item) {%>
                    <div class="item">
                      <div class="ui blue empty circular label"></div>
                      <%= item %>
                    </div>
                    <%});%>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="inline fields">
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="View">
              <label style="padding-right:50px">RDF(S) View</label>
            </div>
          </div>
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="View">
              <label style="padding-right:50px">SKOS View</label>
            </div>
          </div>
          <div class="field">
            <div class="ui slider checkbox" style="padding-right:50px">
              <input type="checkbox" id="showTypesCheckBox" tabindex="0">
              <label> Show Concepts Types</label>
            </div>
          </div>
          <div class="field">
            <div class="ui slider checkbox">
              <input type="checkbox" id="showFilesCheckBox" tabindex="1">
              <label> Show Concepts Files</label>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="ui message" id="notFoundMessage" style="display:none">
      <div class="header">
        message
      </div>
      <ul class="list">
        <li>No concept was found!!</li>
        <li>try another one</li>
      </ul>
    </div>

    <div class="col-sm-12  col-md-6">
      <br/>
      <div id="tree" class="mygrid-wrapper-div" style="height:800px;width:auto"></div>
    </div>
    <div class="col-sm-12 col-md-6" style="padding-top:20px;">

      <ul id="viewList" class="nav nav-tabs" role="tablist" style="display: none">
        <li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#Documentation" role="tab">Documentation</a></li>
        <li class="nav-item"><a class="nav-link" data-toggle="tab" href="#sourceCode" onmousedown="showTurtleSource()" role="tab">Turtle source</a></li>
        <li class="nav-item"><a class="nav-link" data-toggle="tab" href="#showGraph" role="tab">Concept graph</a></li>
      </ul>
      <div class="tab-content">
        <div class="tab-pane active" id="Documentation" role="tabpanel">
          <div id="infoDetails" class="mygrid-wrapper-div" style="height:658px;width:auto">
            <h3 id="conceptHead" style="display: none">Concept Details:</h3>
            <div id="detailTable"></div>
            <div id="domainTable" style="display: none"></div>
            <div id="rangeTable" style="display: none"></div>
            <div id="instancesTable" style="display: none"></div>
            <h3 id="instanceHead" style="display: none"></h3>
            <div id="instanceDetailsTable" style="display: none"></div>
          </div>
        </div>
        <div class="tab-pane" class="tabContent" id="sourceCode" role="tabpanel">
          <h3>Source Code:</h3>
          <!-- <div class="mygrid-wrapper-div" style="height:658px"> -->
          <div class="mygrid-wrapper-div" style="height:658px;width:auto">

            <textarea id="code" name="code" class="form-control" rows="30" wrap="hard"></textarea>
          </div>

          <!-- </div> -->
        </div>
        <div class="tab-pane" class="tabContent" id="showGraph" role="tabpanel">
          <h3>Graph Representation:</h3>
          <div id='graph' class="mygrid-wrapper-div" style="height:658px;width:auto"></div>
        </div>
      </div>
    </div>
  </div>
  <% include footer %>
    <!-- End of expressJS coding-->

    <!-- Start of javascript coding-->
    <script>
      var viewDataRendered = <%- JSON.stringify(data) %>;
      var conceptSelected = "";
      $('.ui.radio.checkbox').checkbox();
      $('.ui.dropdown').dropdown();
      // To hide element from page
      function hide(element) {
        if (element = 'ALL') {
          $("#instanceHead").html();
          $("#instanceDetailsTable").html("");
          $("#instanceHead").hide();
          $("#viewList").hide();
          $("#instanceDetailsTable").hide();
          $("#conceptHead").html("");
          $("#conceptHead").hide();
          $("#infoDetails").hide();
          $("#tree").hide();
        }
      }
      // remove redundant parents from tree
      function getUniqueParents(data) {
        var unique = [...new Set(data.map(item => item.parent))];
        return unique;
      }
      // get nodes which are parents
      function getParentWithChildren(data, parent) {
        var children = [];
        for (var i = 0; i < data.length; i++) {
          if (data[i].parent === parent)
            children.push(data[i]);
        };
        if (isConceptAvailable(parent))
          var parentNode = parent + '<div class = "pull-right" > <a id =' + parent + ' onmousedown = "showTypeFunc(this)" href = "#" class = "btn btn-default btn-xs" role = "button"> Show Type </a><a id=' + parent +
            ' onmousedown="showFileFunc(this)" href="#" class="btn btn-danger btn-xs" role="button">Show File(s)</a> </div>';
        else
          var parentNode = parent + '<div class = "pull-right" > <a id =' + parent + ' href = "#" class = "btn btn-default btn-xs" role = "button"> External </a> </div>';

        var node = {
          text: parentNode,
          nodes: children
        };
        return node;
      }
      // get elements of the tree to display either filtered by file or without
      function getTreeData(propertyName, selectedFileName) {
        if (selectedFileName)
          selectedFileName = selectedFileName.trim();
        // viewDataRendered
        var viewData = viewDataRendered; //TODO: get this data with AJAX request.
        for (var i = 0; i < viewData.length; i++) {
          viewData[i].text = viewData[i].concept + '<div class="pull-right"><a id=' + viewData[i].concept + ' onmousedown="showTypeFunc(this)" href="#" class="btn btn-default btn-xs" role="button">Show Type</a><a id=' + viewData[i]
            .concept + '  href="#" onmousedown="showFileFunc(this)" class="btn btn-danger btn-xs" role="button" >Show File(s)</a></div>';
        }
        var allParents = getUniqueParents(viewData);
        var data = [];
        var j = 0;
        for (var i = 0; i < allParents.length; i++) {
          if (allParents[i])
            data[j++] = getParentWithChildren(viewData, allParents[i]);
        }
        for (var i = 0; i < viewData.length; i++) {
          data[j++] = viewData[i];
        }
        if (propertyName && selectedFileName) {
          var filteredData = [];
          var k = 0;
          for (var i = 0; i < data.length; i++) {
            if (data[i][propertyName])
              if (data[i][propertyName].trim() === selectedFileName) {
                filteredData[k] = data[i];
                k++;
              }
          }
          var allParentsFromFiles = getUniqueParents(filteredData);
          var dataFiles = [];
          var j = 0;
          for (var i = 0; i < allParentsFromFiles.length; i++) {
            if (allParentsFromFiles[i])
              dataFiles[j++] = getParentWithChildren(filteredData, allParentsFromFiles[i]);
          }
          for (var i = 0; i < filteredData.length; i++) {
            dataFiles[j++] = filteredData[i];
          }
          data = dataFiles;
        }
        return data;
      }
      // Bind the data to the tree html element for the first time
      $('#tree').treeview({
        data: getTreeData(), // data is not optional
        levels: 5,
        enableLinks: true,
        onNodeSelected: function(event, node) {
          if (node.concept) {
            $('#graph').empty();
            event.stopPropagation();
            $('#viewList').show();
            exec(node.concept);
            showInstances(node.concept);
            showTurtleSource(node.concept);
            conceptSelected = node.concept;
          } else {
            var parentNode = node.text;
            parentNode = parentNode.split('<');
            var str = parentNode[0];
            exec(str);
            //alert(node);
            ////////////////////////////////////////////////
            ///// testing here message when no item is found
            ///////////////////////////////////////////////
            hide('ALL');
            $('#notFoundMessage').show();
            debugger;
          }
        }
      });
      // Instant search on fly on concept
      var search = function(e) {
        var pattern = $('#input-search').val();
        var options = {
          ignoreCase: $('#chk-ignore-case').is(':checked'),
          exactMatch: $('#chk-exact-match').is(':checked')
        };
        var results = $('#tree').treeview('search', [pattern, options]);
        $('#tree').treeview({
          data: results, // data is not optional
          levels: 5,
          enableLinks: true,
          onNodeSelected: function(event, node) {
            if (node.concept) {
              $('#graph').empty();
              event.stopPropagation();
              $('#viewList').show();
              exec(node.concept);
              showInstances(node.concept);
              showTurtleSource(node.concept);
              conceptSelected = node.concept;
            } else {
              var parentNode = node.text;
              parentNode = parentNode.split('<');
              var str = parentNode[0];
              exec(str);
            }
          }
        });
        if ($('#input-search').val() == '')
          location.reload();
        //$('#search-output').html(output);
      }
      $('#input-search').on('keyup', search);
      $('#btn-clear-search').on('click', function(e) {
        $searchableTree.treeview('clearSearch');
        $('#input-search').val('');
        //$('#search-output').html('');
      });
      // Get the word after slash char of a string
      function trimSlash(str) {
        var n = str.split("/");
        var p = n[n.length - 1];
        return p;
      }
      // Get the word after hash char of a string
      function trimHash(str) {
        var n = str.split("#");
        var p = n[n.length - 1];
        return p;
      }
      // Customization of the RDF type to show as in standards
      function replaceWithRDFType(str) {
        if (str.includes("22-rdf-syntax-ns")) {
          str = "rdf:" + trimHash(str);
        } else if (str.includes('rdf-schema'))
          str = "rdfs:" + trimHash(str);
        else if (str.includes('owl'))
          str = "owl:" + trimHash(str);
        else
          str = str;
        return str;
      }
      //check if concept is in our ontology or external
      function isConceptAvailable(str) {
        for (var i = 0; i < viewDataRendered.length; i++) {
          if (str === viewDataRendered[i].concept)
            return true;
        }
        return false;
      }
      // Menu of the Turtle files to filter concepts based on thier files located in
      $('.dropdown-menu').on('click', 'a', function(e) {
        // 'this' is the clicked anchor
        var text = this.text;
        if (text)
          text = text.trim();
        if (text === "ALL files") {
          $('#tree').treeview({
            data: getTreeData(), // data is not optional
            levels: 5,
            enableLinks: true,
            onNodeSelected: function(event, node) {
              if (node.concept) {
                $('#graph').empty();
                event.stopPropagation();
                $('#viewList').show();
                exec(node.concept);
                showInstances(node.concept);
                showTurtleSource(node.concept);
                conceptSelected = node.concept;
              } else {
                var parentNode = node.text;
                parentNode = parentNode.split('<');
                var str = parentNode[0];
                exec(str);
              }
            }
          });
        } else {
          $('#tree').treeview({
            data: getTreeData('fileName', text), // data is not optional
            levels: 5,
            enableLinks: true,
            onNodeSelected: function(event, node) {
              if (node.concept) {
                $('#graph').empty();
                event.stopPropagation();
                $('#viewList').show();
                exec(node.concept);
                showInstances(node.concept);
                showTurtleSource(node.concept);
                conceptSelected = node.concept;
              } else {
                var parentNode = node.text;
                parentNode = parentNode.split('<');
                var str = parentNode[0];
                exec(str);
              }
            }
          });
        }
      });
      // show file where the concept is found
      showFileFunc = function(event) {
        var conceptFile = [];
        for (var i = 0; i < viewDataRendered.length; i++) {
          if (event.id === viewDataRendered[i].concept) {
            conceptFile.push(viewDataRendered[i].fileName);
          }
        }
        var unique = [...new Set(conceptFile.map(item => item))];
        if (unique.length > 0)
          event.text = unique;
      }
      //show RDFType of the concept
      showTypeFunc = function(event) {
        //event.stopPropagation();
        var conceptRDFType = [];
        for (var i = 0; i < viewDataRendered.length; i++) {
          if (event.id === viewDataRendered[i].concept) {
            conceptRDFType.push(viewDataRendered[i].RDFType);
          }
        }
        var unique = [...new Set(conceptRDFType.map(item => item))];
        if (unique.length > 0) {
          event.text = unique;
        }
      }
      // show info. details of clicked instance
      function showInstanceDetails(instanceURI) {
        var endpoint = "http://localhost:3030/ds/sparql?query=";
        var querystring = 'SELECT  ?p ?o WHERE {  <' + instanceURI + '> ?p ?o }';
        var method = "POST";
        // You REALLY want async = true.
        var async = true;
        var request = new XMLHttpRequest();
        request.onload = function() {
          var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
          var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
          var instances = data.results.bindings;
          console.log(instances);
          if (instances[0] != null) {
            var instancesDetailsTable = '<table class="table table-striped" >' +
              '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
              '<tr>' +
              '<th>Predicate</th>' +
              '<th>Object</th>' +
              '</tr>';
            for (var i = 0; i < instances.length; i++) {
              var key1 = replaceWithRDFType(trimSlash(instances[i]['p'].value));
              var key2 = replaceWithRDFType(trimSlash(instances[i]['o'].value));

              if (isConceptAvailable(key1)) {
                key1 = '<a href="#" onmousedown="exec(&quot;' + key1 + '&quot;); return false; ">' + key1 + '</a>';
              }
              if (isConceptAvailable(key2)) {
                key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              instancesDetailsTable += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            }
            instancesDetailsTable += '</table> ';
            $("#instanceHead").show();
            $("#instanceHead").html('<p > Instance Details for :<code>' + trimSlash(instanceURI) + '</code></p>');
            $("#instanceDetailsTable").show();
            $("#instanceDetailsTable").html(instancesDetailsTable);
          } else {
            //alert('no instances');
            $("#instanceHead").html();
            $("#instanceDetailsTable").html("");
            $("#instanceHead").hide();
            $("#instanceDetailsTable").hide();
          }
        }
        request.open(method, endpoint + querystring, true);
        request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
        // Actually sends the request to the server.
        request.send();
        //return false;
      }
      // To display instances of  the selected node
      function showInstances(item) {
        var conceptURI;
        var isURIExist = false;
        if (item) {
          for (var i = 0; i < viewDataRendered.length; i++) {
            if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
              conceptURI = viewDataRendered[i].URI;
              isURIExist = true;
              break;
            }
          }
          if (isURIExist) {
            var endpoint = "http://localhost:3030/ds/sparql?query=";
            var querystring = 'SELECT  ?s WHERE { ?s  a <' + conceptURI + '> }';
            var method = "POST";
            // You REALLY want async = true.
            var async = true;
            var request = new XMLHttpRequest();
            request.onload = function() {
              var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
              var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
              var instances = data.results.bindings;
              if (instances[0] != null) {
                var instancesTable = '<table class="table table-striped" >' +
                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                  '<tr>' +
                  '<th>Instances</th>' +
                  '</tr>';
                //  console.log(instances);
                for (var i = 0; i < instances.length; i++) {
                  var instanceURI = instances[i]["s"].value;
                  var key1 = trimSlash(instances[i]["s"].value);
                  key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';

                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                }
                //var instances ="";
                instancesTable += '</table> ';
                $("#instancesTable").show();
                $("#instancesTable").html(instancesTable);
              } else {
                //alert('no instances');
                $("#instancesTable").html("");
                $("#instancesTable").hide();
                $("#instanceHead").hide();
                $("#instanceDetailsTable").hide();
              }
            }
            request.open(method, endpoint + querystring, true);
            request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
            // Actually sends the request to the server.
            request.send();
            //}
          } else
            $("#instancesTable").html('<p>No node was selected !!!</p>');
        }
      }
      // To display Turtle source for the selected node
      function showTurtleSource(item) {
        var conceptURI;
        var isURIExist = false;
        if (item) {
          for (var i = 0; i < viewDataRendered.length; i++) {
            if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
              conceptURI = viewDataRendered[i].URI;
              isURIExist = true;
              break;
            }
          }
        } else if (conceptSelected) {
          for (var i = 0; i < viewDataRendered.length; i++) {
            if (conceptSelected.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
              conceptURI = viewDataRendered[i].URI;
              isURIExist = true;
              break;
            }
          }
        } else
          isURIExist = false;
        if (isURIExist) {
          var endpoint = "http://localhost:3030/ds/sparql?query="
          var querystring = 'CONSTRUCT { <' + conceptURI + '> ?p ?o .}  WHERE {  <' + conceptURI + '> ?p ?o .}'
          var method = "POST";
          // You REALLY want async = true.
          // Otherwise, it'll block ALL execution waiting for server response.
          var async = true;
          var request = new XMLHttpRequest();
          request.onload = function() {
            var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
            //var data = JSON.stringify(request.responseText); // Returned data, e.g., an HTML document.
            var data = request.responseText; // Returned data, e.g., an HTML document.
            $('#code').html(data);

          }
          request.open(method, endpoint + querystring, true);
          request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded;charset=UTF-8');
          // Or... request.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
          // Or... whatever
          // Actually sends the request to the server.
          request.send();
        } else
          $("#code").html('<p>No node was selected !!!</p>');
      }
      // Fuction to query sparql endpoint return graph and queryResult
      function exec(item) {
        var str = "";
        var isURIExist = false;
        var conceptURI;
        conceptSelected = item;
        for (var i = 0; i < viewDataRendered.length; i++) {
          if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
            conceptURI = viewDataRendered[i].URI;
            isURIExist = true;
            break;
          }
        }
        if (isURIExist) {
          var endpoint = "http://localhost:3030/ds/sparql"
          var sparql = 'prefix schema: <http://schema.org/> \n' +
            'prefix owl:   <http://www.w3.org/2002/07/owl#> \n' +
            'prefix xsd:   <http://www.w3.org/2001/XMLSchema#> \n' +
            'prefix voaf:  <http://purl.org/vocommons/voaf#> \n' +
            'prefix skos:  <http://www.w3.org/2004/02/skos/core#> \n' +
            'prefix mv:    <http://eccenca.com/mobivoc/> \n' +
            'prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> \n' +
            'prefix vcard: <http://www.w3.org/2001/vcard-rdf/3.0#> \n' +
            'prefix gr:    <http://purl.org/goodrelations/v1#> \n' +
            'prefix geo:   <http://www.w3.org/2003/01/geo/wgs84_pos#> \n' +
            'prefix s:     <http://schema.org/> \n' +
            'prefix dct:   <http://purl.org/dc/terms/> \n' +
            'prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n' +
            'prefix vCard: <http://www.w3.org/2001/vcard-rdf/3.0#> \n' +
            'prefix foaf:  <http://xmlns.com/foaf/spec/#> \n' +
            'SELECT  ?p ?o WHERE {  <' + conceptURI + '> ?p ?o }  '
          d3sparql.query(endpoint, sparql, render)
        }
      }
      // Function to display data in tables on the page
      function render(json) {
        var dataSPARQL = json.results.bindings;
        var table = '<table class="table table-striped" >' +
          '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
          '<tr>' +
          '<th>Predicate</th>' +
          '<th>Object</th>' +
          '</tr>';
        var rangeTable = '<table class="table table-striped " >' +
          '<colgroup> <col class="col-md-6"> </colgroup>' +
          '<tr>' +
          '<th>Values expected to be one of these types</th>' +
          '</tr>';
        var domainTable = '<table class="table table-striped " >' +
          '<colgroup> <col class="col-md-6"> </colgroup>' +
          '<tr>' +
          '<th>Used on these types</th>' +
          '</tr>';
        for (var i = 0; i < dataSPARQL.length; i++) {
          var key1 = replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value));
          var key2 = replaceWithRDFType(trimSlash(dataSPARQL[i]['o'].value));
          if (key1.includes("domain")) {
            if (isConceptAvailable(key2))
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';
          } else if (key1.includes("range")) {
            if (isConceptAvailable(key2))
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';
          } else {
            if (isConceptAvailable(key1)) {
              key1 = '<a href="#" onmousedown="exec(&quot;' + key1 + '&quot;); return false; ">' + key1 + '</a>';
            }
            if (isConceptAvailable(key2)) {
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            }
            table += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
          }
        }
        table += '</table> ';
        domainTable += '</table> ';
        rangeTable += '</table> ';
        //display returned data on the Html tables
        $("#conceptHead").show();
        $("#conceptHead ").html('<p > Concept Details :<code>' + conceptSelected + '</code></p>');
        $("#infoDetails").show();
        $("#detailTable").html(table);
        $("#domainTable").html(domainTable);
        $("#rangeTable").html(rangeTable);
        //To display on graph
        var config = {
          "radius": 20,
          "charge": -100,
          "distance": 10,
          "width": 500,
          "height": 400,
          "selector ": '#showGraph'
        };
        d3sparql.forcegraph(json, config);

        $('#graph').html('');
        $('div.d3sparql.forcegraph').appendTo($('#graph'));


      }
      // To display in TabView
      $(document).ready(function(e) {
        $(document).on('click', 'a[href="#"]', function(e) {
          e.preventDefault();
        });
        // tabs config.
        $('.tabbing').mTab({
          navigation: ".tabNav",
          container: ".tabContainer",
          activeTab: 1,
          activeClass: "active",
          scrollOffset: true,
          accordScreen: 768,
          toggleClose: true,
          animation: false,
          openWithUrl: true,
          callbackonclick: function() {},
          callback: function() {}
        });

        // var editor = CodeMirror.fromTextArea(document.getElementById("code"), {
        //   mode: "application/x-sparql-query",
        //   tabMode: "indent",
        //   matchBrackets: true
        // });
        // formatting Turtle source code
        //  $(#code).show();


        //
        // $('.xx').on('click', function (event){
        //
        //
        // event.stopPropagation();
        //
        //   var conceptFile = [];
        //   for (var i = 0; i < viewDataRendered.length; i++) {
        //     if ($(this).attr('id') === viewDataRendered[i].concept) {
        //       conceptFile.push(viewDataRendered[i].fileName);
        //     }
        //   }
        //   var unique = [...new Set(conceptFile.map(item => item))];
        //   if (unique.length > 0)
        //     $(this).html(unique);
        //   else
        //     $(this).html("External URI");
        //
        // });

      });
    </script>
    <!-- End of javascript coding-->
