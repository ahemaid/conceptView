<% include header %>

    <!--
    <h1><%-title %></h1>
-->
    <div class="container">
        <h1> Tree View of Concepts</h1>
        <!--
        <div class="row">
-->
        <hr>
        <div class="col-sm-6">
            <span class="pull-right">

            <div class="col-sm-4" class="dropdown">

                    <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">Filter by File
                        <span class="caret"></span></button>
            <ul class="dropdown-menu">
                <li>
                    <a href="#">
                                    ALL files
                                </a>
                </li>
                <%fileNames.forEach(function (item) {%>
                    <li>
                        <a href="#">
                            <%= item %>
                        </a>
                    </li>
                    <%});%>


            </ul>

        </div>
        </span>

        <br/>

        <div class="row">
            <span class="pull-right">

                        <label >
                            <input type="checkbox" class="form-check-input" id="chk-ignore-case" value="false"> Ignore Case
                        </label >
                        <label >
                            <input type="checkbox" class="form-check-input" id="chk-exact-match" value="false"> Exact Match
                        </label>

                                                                  </span>

        </div>

        <!-- <form> -->
        <div class="form-group">
            <label for="input-search" class="sr-only">Search Tree:</label>
            <input type="input" class="form-control" id="input-search" placeholder="Type to search..." value="">
        </div>

        <div class="row">

            <label class="col-sm-4" class="radio inline">
                <input type="radio" value="1" /> View with Classes
            </label>
            <label class="col-sm-4" class="radio inline">
                <input type="radio" value="2" /> View with SKOS
            </label>

        </div>


        <div>
            <span class="pull-right">
                <button type="button" class="btn btn-success" id="btn-search">Search</button>
                <button type="button" class="btn btn-default" id="btn-clear-search">Clear</button>
     </span>
        </div>
        <br/>
        <br/>
        <br/>
        <div>

            <h2>Results</h2>
            <!--
<div id="search-output"></div>-->
            <!-- </form> -->
            <div id="tree"></div>
        </div>


    </div>

    <div class="col-sm-6">
        <div id="infoDetails" class="mygrid-wrapper-div" style="height:500px;width:500px; display: none">

            <h3 id="conceptHead">Concept Details:</h3>
            <div id="detailTable"></div>
            <div id="domainTable"></div>
            <div id="rangeTable"></div>

            <h3>Graph Representation :</h3>
            <div class="container" style="width:100%;height:100%;">
                <div id='graph'></div>


            </div>

        </div>


    </div>


    <% include footer %>

        <script>
            var viewDataRendered = <%- JSON.stringify(data) %>;
            var conceptSelected = "";

            function getUniqueParents(data) {
                var unique = [...new Set(data.map(item => item.parent))];

                return unique;
            }

            function getParentWithChildren(data, parent) {


                var children = [];
                for (var i = 0; i < data.length; i++) {
                    if (data[i].parent === parent)
                        children.push(data[i]);
                };

                var node = {
                    text: parent + '<div class = "pull-right" > <a id =' + parent + ' onmousedown = "showTypeFunc(this)" href = "JavaScript:Void(0);" class = "btn btn-default btn-xs" role = "button"> Show Type </a><a id=' + parent + ' onmousedown="showFileFunc(this)" href="JavaScript:Void(0);" class="btn btn-danger btn-xs" role="button">Show File(s)</a> </div>',
                    nodes: children
                        /*tags: ['<a id=' + parent + ' href="" onmousedown="showFileFunc(this)">Show file</a>',
                            '<a id=' + parent + ' href="" onmousedown="showTypeFunc(this)">Show Type</a>'
                        ],
                        tagsClass: 'label label-default'*/

                };

                return node;
            }

            function getTreeData(propertyName, propertyValue) {
                if (propertyValue)
                    propertyValue = propertyValue.trim();
                // viewDataRendered
                var viewData = viewDataRendered; //TODO: get this data with AJAX request.
                for (var i = 0; i < viewData.length; i++) {
                    viewData[i].text = viewData[i].concept + '<div class="pull-right"><a id=' + viewData[i].concept + ' onmousedown="showTypeFunc(this)" href="JavaScript:Void(0);" class="btn btn-default btn-xs" role="button">Show Type</a><a id=' + viewData[i].concept + ' onmousedown="showFileFunc(this)" href="JavaScript:Void(0);" class="btn btn-danger btn-xs" role="button" >Show File(s)</a></div>';
                    /*    viewData[i].tags = ['<a id=' + viewData[i].concept + ' href="" onmousedown="showFileFunc(this)">Show file</a>', '<a id=' + viewData[i].concept + ' href="" onmousedown="showTypeFunc(this)">Show Type</a>'];
                        viewData[i].tagsClass = 'label label-default';*/
                    //viewData[i].href = "javascript:refConceptfunc(this);";


                }
                var allParents = getUniqueParents(viewData);
                var data = [];
                var j = 0;
                for (var i = 0; i < allParents.length; i++) {
                    if (allParents[i])
                        data[j++] = getParentWithChildren(viewData, allParents[i]);
                }

                for (var i = 0; i < viewData.length; i++) {
                    data[j++] = viewData[i];
                }

                if (propertyName && propertyValue) {
                    var filteredData = [];
                    var k = 0;
                    for (var i = 0; i < data.length; i++) {
                        if (data[i][propertyName])
                            if (data[i][propertyName].trim() === propertyValue) {
                                filteredData[k] = data[i];
                                k++;
                            }
                    }
                    //data = filteredData;
                    var allParentsFromFiles = getUniqueParents(filteredData);
                    var dataFiles = [];
                    var j = 0;
                    for (var i = 0; i < allParentsFromFiles.length; i++) {
                        if (allParentsFromFiles[i])
                            dataFiles[j++] = getParentWithChildren(filteredData, allParentsFromFiles[i]);
                    }
                    for (var i = 0; i < filteredData.length; i++) {
                        dataFiles[j++] = filteredData[i];
                    }

                    /*< filteredData.length; i++) { data2[j++]=f ilteredData[i]; }*/
                    data = dataFiles;

                }

                return data;
            }


            $('#tree').treeview({
                data: getTreeData(), // data is not optional
                levels: 5,
                enableLinks: true,
                /*
                                showTags: true,
                */
                onNodeSelected: function(event, node) {
                    $('#graph').empty();
                    exec(node.concept);
                    //debugger;

                }
            });

            function getTreeInstantData(results) {
                return results;
            }

            //            $("#clickable a").click(function(e) {
            //                //do something
            //                e.stopPropagation();
            // })
            $('#tree').treeview({
                data: getTreeData(), // data is not optional
                levels: 5,
                enableLinks: true,

                /*
                                showTags: true,
                */
                onNodeSelected: function(event, node) {
                    $('#graph').empty();
                    exec(node.concept);


                }
            });

            var search = function(e) {
                var pattern = $('#input-search').val();
                var options = {
                    ignoreCase: $('#chk-ignore-case').is(':checked'),
                    exactMatch: $('#chk-exact-match').is(':checked')
                };
                var results = $('#tree').treeview('search', [pattern, options]);

                $('#tree').treeview({
                    data: getTreeInstantData(results), // data is not optional
                    levels: 5,
                    enableLinks: true,
                    onNodeSelected: function(event, node) {
                        $('#graph').empty();

                        exec(node.concept);

                    }
                });
                //$('#search-output').html(output);
            }

            $('#btn-search').on('click', search);
            $('#input-search').on('keyup', search);

            $('#btn-clear-search').on('click', function(e) {
                $searchableTree.treeview('clearSearch');
                $('#input-search').val('');
                //$('#search-output').html('');
            });


            //            function selectItem(item) {
            //
            //                alert(item.label + " " + item.concept);
            //            }

            function trimSlash(str) {

                var n = str.split("/");
                var p = n[n.length - 1];

                return p;
            }

            function trimHash(str) {

                var n = str.split("#");
                var p = n[n.length - 1];

                return p;
            }

            function replaceWithRDFType(str) {

                if (str.includes("22-rdf-syntax-ns")) {
                    str = "rdf:" + trimHash(str);
                } else if (str.includes('rdf-schema'))
                    str = "rdfs:" + trimHash(str);
                else if (str.includes('owl'))
                    str = "owl:" + trimHash(str);
                else
                    str = str;
                return str;
            }

            function isConceptAvailable(str) {

                for (var i = 0; i < viewDataRendered.length; i++) {
                    if (str === viewDataRendered[i].concept)
                        return true;
                }
                return false;
            }

            $('.dropdown-menu').on('click', 'a', function(e) {
                // 'this' is the clicked anchor
                var text = this.text;
                if (text)
                    text = text.trim();

                if (text === "ALL files") {
                    $('#tree').treeview({
                        data: getTreeData(), // data is not optional
                        levels: 5,
                        enableLinks: true,

                        //                        showTags: true,
                        //                        selectedIcon: "glyphicon glyphicon-stop",
                        //                        color: 'green',
                        onNodeSelected: function(event, node) {
                            $('#graph').empty();
                            exec(node.concept);

                        }


                    });
                } else {
                    $('#tree').treeview({
                        data: getTreeData('fileName', text), // data is not optional
                        levels: 5,
                        enableLinks: true,
                        //
                        //                        showTags: true,
                        //                        selectedIcon: "glyphicon glyphicon-stop",
                        //                        color: 'green',
                        onNodeSelected: function(event, node) {
                            $('#graph').empty();
                            event.stopPropagation();
                            if (node.text.includes("div") && !node.parent) {
                                var parentNode = node.text;
                                parentNode = parentNode.split('<');
                                var str = parentNode[0];
                                str = str.trim();
                                alert(str);
                                // conceptSelected = str;
                                exec(str);


                            } else {
                                exec(node.concept);

                            }

                            //alert("here is parent div " + node.text);

                            debugger;


                        }

                    });
                }

            });


            // show file
            showFileFunc = function(e) {
                var conceptFile = [];
                for (var i = 0; i < viewDataRendered.length; i++) {
                    if (e.id === viewDataRendered[i].concept) {
                        conceptFile.push(viewDataRendered[i].fileName);
                    }
                }
                var unique = [...new Set(conceptFile.map(item => item))];
                if (unique.length > 0)
                    e.text = unique;
                else
                    e.text = "Not Found";


            }

            //show type
            showTypeFunc = function(e) {
                var conceptRDFType = [];
                for (var i = 0; i < viewDataRendered.length; i++) {
                    if (e.id === viewDataRendered[i].concept) {
                        conceptRDFType.push(viewDataRendered[i].RDFType);


                    }


                }
                // <!--% console.log("Hi"); %-->

                var unique = [...new Set(conceptRDFType.map(item => item))];

                if (unique.length > 0) {

                    e.text = unique;
                } else {
                    e.text = "Not Found";
                    //$('#detailTable').html('more than one');

                }
                debugger;

            }


            function exec(item) {
                var str = "";
                var isURIExist = false;
                var conceptURI;
                conceptSelected = item;
                for (var i = 0; i < viewDataRendered.length; i++) {
                    if (item.toLowerCase() === viewDataRendered[i].concept.toLowerCase()) {
                        conceptURI = viewDataRendered[i].URI;
                        //alert(conceptURI);
                        isURIExist = true;
                        break;

                    }
                }
                if (isURIExist) {
                    var endpoint = "http://localhost:3030/ds/sparql"
                    var sparql = 'prefix schema: <http://schema.org/> \n' +
                        'prefix owl:   <http://www.w3.org/2002/07/owl#> \n' +
                        'prefix xsd:   <http://www.w3.org/2001/XMLSchema#> \n' +
                        'prefix voaf:  <http://purl.org/vocommons/voaf#> \n' +
                        'prefix skos:  <http://www.w3.org/2004/02/skos/core#> \n' +
                        'prefix mv:    <http://eccenca.com/mobivoc/> \n' +
                        'prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> \n' +
                        'prefix vcard: <http://www.w3.org/2001/vcard-rdf/3.0#> \n' +
                        'prefix gr:    <http://purl.org/goodrelations/v1#> \n' +
                        'prefix geo:   <http://www.w3.org/2003/01/geo/wgs84_pos#> \n' +
                        'prefix s:     <http://schema.org/> \n' +
                        'prefix dct:   <http://purl.org/dc/terms/> \n' +
                        'prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> \n' +
                        'prefix vCard: <http://www.w3.org/2001/vcard-rdf/3.0#> \n' +
                        'prefix foaf:  <http://xmlns.com/foaf/spec/#> \n' +
                        'SELECT  ?p ?o WHERE {  <' + conceptURI + '> ?p ?o }  '
                        //d3sparql.query(endpoint, sparql, render)
                    d3sparql.query(endpoint, sparql, render)
                    debugger;
                    //var concept = trim(conceptURI);
                } else {
                    alert("show");
                    $("#infoDetails").show();
                    $("#conceptHead ").html('<p > Concept Details :<code>' + conceptSelected + '</code></p>');
                    $('#myDiv').hide();


                }

            }

            function render(json) {

                var dataSPARQL = json.results.bindings;

                var table = '<table class="table table-striped" >' +
                    '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
                    '<tr>' +
                    '<th>Predicate</th>' +
                    '<th>Object</th>' +
                    '</tr>';
                var rangeTable = '<table class="table table-striped " >' +
                    '<colgroup> <col class="col-md-6"> </colgroup>' +
                    '<tr>' +
                    '<th>Values expected to be one of these types</th>' +
                    '</tr>';
                var domainTable = '<table class="table table-striped " >' +
                    '<colgroup> <col class="col-md-6"> </colgroup>' +
                    '<tr>' +
                    '<th>Used on these types</th>' +
                    '</tr>';
                for (var i = 0; i < dataSPARQL.length; i++) {
                    var key1 = replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value));
                    var key2 = replaceWithRDFType(trimSlash(dataSPARQL[i]['o'].value));
                    //                    if (dataSPARQL[i]['o'].label))
                    //                        key2 = key2 + dataSPARQL[i]['o'].label;

                    if (key1.includes("domain")) {

                        if (isConceptAvailable(key2))
                            key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
                        domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';


                    } else if (key1.includes("range")) {

                        if (isConceptAvailable(key2))
                            key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
                        rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';

                    } else {

                        if (isConceptAvailable(key1)) {
                            key1 = '<a href="#" onmousedown="exec(&quot;' + key1 + '&quot;); return false; ">' + key1 + '</a>';
                        }
                        if (isConceptAvailable(key2)) {
                            key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
                        }
                        //debugger;

                        table += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
                    }

                }
                table += '</table> ';
                domainTable += '</table> ';
                rangeTable += '</table> ';

                $("#conceptHead ").html('<p > Concept Details :<code>' + conceptSelected + '</code></p>');
                // debugger;
                $("#infoDetails").show();
                $("#detailTable").html(table);
                $("#domainTable").html(domainTable);
                $("#rangeTable").html(rangeTable);

                //display on graph
                //display on graph
                var config = {
                    "charge ": '-500', //-500,
                    "distance ": '50', //50,
                    "height": '1000',
                    "width": '750',
                    "selector ": '#graph'
                };
                d3sparql.forcegraph(json, config);
            }

        </script>
