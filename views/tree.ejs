<% include header %>
    <!--
    <h1><%-title %></h1>
-->
    <div class="container">
        <h1> Tree View of Concepts</h1>
        <!--
        <div class="row">
-->
        <hr>
        <div class="col-sm-6">
            <span class="pull-right">

            <div class="col-sm-4" class="dropdown">

                    <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">Filter by File
                        <span class="caret"></span></button>
            <ul class="dropdown-menu">
                <li>
                    <a href="#">
                                    ALL files
                                </a>
                </li>
                <%fileNames.forEach(function (item) {%>
                    <li>
                        <a href="#">
                            <%= item %>
                        </a>
                    </li>
                    <%});%>


            </ul>

        </div>
        </span>

        <br/>

        <div class="row">
            <span class="pull-right">

                        <label >
                            <input type="checkbox" class="form-check-input" id="chk-ignore-case" value="false"> Ignore Case
                        </label >
                        <label >
                            <input type="checkbox" class="form-check-input" id="chk-exact-match" value="false"> Exact Match
                        </label>

                                                                  </span>

        </div>

        <!-- <form> -->
        <div class="form-group">
            <label for="input-search" class="sr-only">Search Tree:</label>
            <input type="input" class="form-control" id="input-search" placeholder="Type to search..." value="">
        </div>

        <div class="row">

            <label class="col-sm-4" class="radio inline">
                <input type="radio" value="1" /> View with Classes
            </label>
            <label class="col-sm-4" class="radio inline">
                <input type="radio" value="2" /> View with SKOS
            </label>

        </div>


        <div>
            <span class="pull-right">
                <button type="button" class="btn btn-success" id="btn-search">Search</button>
                <button type="button" class="btn btn-default" id="btn-clear-search">Clear</button>
     </span>
        </div>
        <br/>
        <br/>
        <br/>
        <div>

            <h2>Results</h2>
            <div id="search-output"></div>
            <!-- </form> -->
            <div id="tree"></div>
        </div>


    </div>

    <div id="infoDetails" class="col-sm-6">
        <div class='container-fluid'>
            <div data-spy="affix" data-offset-top="50">
                <div class="header_for_fix">
                    <h2>Events</h2>
                    <div id="selectable-output"></div>
                    <div id="query-output"></div>
                </div>
            </div>

        </div>

    </div>


    </div>
    <!--        <div class="row">-->
    <!--<hr>
        <h2>Data</h2>
        <div class="col-sm-4">
            <h2>JSON Data</h2>
            <div id="treeview12" class=""></div>
        </div>
        <div class="col-sm-4">
            <h2></h2>
            <div id="treeview13" class=""></div>
        </div>
        <div class="col-sm-4">
            <h2></h2>
            <div id="treeview14"></div>
        </div>-->
    <!--
</div>-->
    <br/>
    <br/>
    <br/>
    <br/>

    <% include footer %>
        <script>
            var viewDataRendered = <%- JSON.stringify(data) %>;

            function getUniqueParents(data) {
                var unique = [...new Set(data.map(item => item.parent))];

                return unique;
            }

            function getParentWithChildren(data, parent) {


                var children = [];
                for (var i = 0; i < data.length; i++) {
                    if (data[i].parent === parent)
                        children.push(data[i]);
                };

                var node = {
                    text: parent,
                    nodes: children,
                    tags: ['<a id=' + parent + ' href="" onmousedown="showFileFunc(this)">Show file</a>',
                        '<a id=' + parent + ' href="" onmousedown="showTypeFunc(this)">Show Type</a>'
                    ],
                    tagsClass: 'label label-default'

                };

                return node;
            }

            function getTreeData(propertyName, propertyValue) {
                if (propertyValue)
                    propertyValue = propertyValue.trim();
                // viewDataRendered
                var viewData = viewDataRendered; //TODO: get this data with AJAX request.
                for (var i = 0; i < viewData.length; i++) {
                    viewData[i].text = viewData[i].concept;
                    viewData[i].tags = ['<a id=' + viewData[i].concept + ' href="" onmousedown="showFileFunc(this)">Show file</a>', '<a id=' + viewData[i].concept + ' href="" onmousedown="showTypeFunc(this)">Show Type</a>'];
                    viewData[i].tagsClass = 'label label-default';
                    //viewData[i].href = "javascript:refConceptfunc(this);";


                }
                var allParents = getUniqueParents(viewData);
                var data = [];
                var j = 0;
                for (var i = 0; i < allParents.length; i++) {
                    if (allParents[i])
                        data[j++] = getParentWithChildren(viewData, allParents[i]);
                }

                for (var i = 0; i < viewData.length; i++) {
                    data[j++] = viewData[i];
                }

                if (propertyName && propertyValue) {
                    var filteredData = [];
                    var k = 0;
                    for (var i = 0; i < data.length; i++) {
                        if (data[i][propertyName])
                            if (data[i][propertyName].trim() === propertyValue) {
                                filteredData[k] = data[i];
                                k++;
                            }
                    }
                    data = filteredData;
                }

                return data;
            }

            function refConceptfunc() {
                alert("hello")
            }
            //            $("#clickable a").click(function(e) {
            //                //do something
            //                e.stopPropagation();
            // })
            $('#tree').treeview({
                data: getTreeData(), // data is not optional
                levels: 5,
                showTags: true,
                onNodeSelected: function(event, node) {
                    /*                    var senderElementName = event.target.tagNametoLowerCase();
                                        if (senderElementName === 'li')
                                            alert('li is pressed');
                                        else {


                                            alert('others are  pressed');
                                            event.stopPropagation();
                                        }*/

                    //$(this).attr("href", "http://tnbelt.com");
                    //$('#selectable-output').prepend('<p>/tree?id=' + node.text + "   " + node.tag + ' was selected</p>');
                    //location.replace("/tree" + node.href);
                    //$('#selectable-output').load("/tree" + node.href);
                    //location.replace("/tree/" + node.text);
                    //console.log($(node.text);


                }
            });

            function getTreeInstantData(results) {
                /*                alret(results);
                                // viewDataRendered
                                var viewData = viewDataRendered; //TODO: get this data with AJAX request.

                                var allParents = getUniqueParents(viewData);
                                var data = [];
                                var j = 0;
                                for (var i = 0; i < allParents.length; i++) {
                                    if (allParents[i])
                                        data[j++] = getParentWithChildren(viewData, allParents[i]);
                                }

                                for (var i = 0; i < viewData.length; i++) {
                                    data[j++] = viewData[i];
                                }

                                if (results.length >0) {
                                    var filteredData = [];
                                    var k = 0;
                                    for (var i = 0; i < data.length; i++) {
                                        if (data[i][propertyName])
                                            if (data[i][propertyName].trim() === propertyValue) {
                                                filteredData[k] = data[i];
                                                k++;
                                            }
                                    }
                                    data = filteredData;
                                }*/

                return results;
            }

            function refConceptfunc() {
                alert("hello")
            }
            //            $("#clickable a").click(function(e) {
            //                //do something
            //                e.stopPropagation();
            // })
            $('#tree').treeview({
                data: getTreeData(), // data is not optional
                levels: 5,
                showTags: true,
                onNodeSelected: function(event, node) {
                    /*                    var senderElementName = event.target.tagNametoLowerCase();
                                        if (senderElementName === 'li')
                                            alert('li is pressed');
                                        else {


                                            alert('others are  pressed');
                                            event.stopPropagation();
                                        }*/

                    //$(this).attr("href", "http://tnbelt.com");
                    //$('#selectable-output').prepend('<p>/tree?id=' + node.text + "   " + node.tag + ' was selected</p>');
                    //location.replace("/tree" + node.href);
                    //$('#selectable-output').load("/tree" + node.href);
                    //location.replace("/tree/" + node.text);
                    //console.log($(node.text);


                }
            });

            var search = function(e) {
                var pattern = $('#input-search').val();
                var options = {
                    ignoreCase: $('#chk-ignore-case').is(':checked'),
                    exactMatch: $('#chk-exact-match').is(':checked'),
                    revealResults: $('#chk-reveal-results').is(':checked')
                };
                var results = $('#tree').treeview('search', [pattern, options]);
                //alert(results);
                var output = '<p>' + results.length + ' matches found</p>';
                $.each(results, function(index, result) {
                    output += '<p>- ' + result.text + '</p>';

                });
                $('#tree').treeview({
                    data: getTreeInstantData(results), // data is not optional
                    levels: 5,
                    showTags: true,
                    enableLinks: true,
                    selectedIcon: "glyphicon glyphicon-stop",
                    color: 'green',
                    onNodeSelected: function(event, node) {}
                });
                //$('#search-output').html(output);
            }

            $('#btn-search').on('click', search);
            $('#input-search').on('keyup', search);

            $('#btn-clear-search').on('click', function(e) {
                $searchableTree.treeview('clearSearch');
                $('#input-search').val('');
                $('#search-output').html('');
            });


            function selectItem(item) {

                alert(item.label + " " + item.concept);
            }

            $('.dropdown-menu').on('click', 'a', function(e) {
                // 'this' is the clicked anchor
                var text = this.text;
                if (text)
                    text = text.trim();

                if (text === "ALL files") {
                    $('#tree').treeview({
                        data: getTreeData(), // data is not optional
                        levels: 5,
                        showTags: true,
                        enableLinks: true,
                        selectedIcon: "glyphicon glyphicon-stop",
                        color: 'green',
                        onNodeSelected: function(event, node) {}

                        /*                    onNodeSelected: function(event, node) {
                                                        //$(this).attr("href", "http://tnbelt.com");
                                       
                                       <p> node selected = ' + JSON.stringify(event) + ' data = /tree?id=' + node.text + " " + node.tag + ' was selected</p>');
                                                        //location.replace("/tree" + node.href);
                                //$('#selectable-output').load("/tree" + node.href);
                                //location.replace("/tree/" + node.text);
                                //console.log($(node.text);


                        } */
                    });
                } else {
                    $('#tree').treeview({
                        data: getTreeData('fileName', text), // data is not optional
                        levels: 5,
                        showTags: true,
                        enableLinks: true,
                        selectedIcon: "glyphicon glyphicon-stop",
                        color: 'green',
                        onNodeSelected: function(event, node) {



                                location.replace("https://www.w3schools.com");
                            }
                            /*                  onNodeSelected: function(event, node) {

                                                  //$(this).attr("href", "http://tnbelt.com");
                                                  /*$('#selectable-output').prepend('<p> node selected = ' + JSON.stringify(event) + ' data = /tree?id=' + node.text + " " + node.tag + ' was selected</p>');
                                    $('#selectable-output').prepend('<p> node selected =  data = /tree?id=' + node.text + ' was selected</p>');
                            //location.replace("/tree" + node.href);
                            //$('#selectable-output').load("/tree" + node.href);
                            //location.replace("/tree/" + node.text);
                            //console.log($(node.text);


                    } */
                    });
                }

            });


            // show file
            showFileFunc = function(e) {
                var conceptFile = [];
                //var viewData = <!--%- JSON.stringify(data) %--S>;
                //alert("id is " + e.id + " json is " + viewDataRendered[0].concept)
                for (var i = 0; i < viewDataRendered.length; i++) {
                    if (e.id === viewDataRendered[i].concept) {
                        conceptFile.push(viewDataRendered[i].fileName);
                    }
                    // alert("id is " + e.id + " json is " + viewDataRendered[i].concept)
                    // if (!(conceptFile.includes(viewDataRendered[i].concept)
                    //if ((conceptFile.include(viewDataRendered[i].fileName))) {
                    //alert("found");
                    //debugger;
                    //}
                }
                var unique = [...new Set(conceptFile.map(item => item))];
                // alert(unique);
                //alert(conceptFile);
                e.text = conceptFile;
            }

            //show type

            showTypeFunc = function(e) {
                var conceptRDFType = [];
                //var viewData = <!--%- JSON.stringify(data) %--S>;
                //alert("id is " + e.id + " json is " + viewDataRendered[0].concept)
                for (var i = 0; i < viewDataRendered.length; i++) {
                    if (e.id === viewDataRendered[i].concept) {
                        conceptRDFType.push(viewDataRendered[i].RDFType);
                    }
                    // alert("id is " + e.id + " json is " + viewDataRendered[i].concept)
                    // if (!(conceptFile.includes(viewDataRendered[i].concept)
                    //if ((conceptFile.include(viewDataRendered[i].fileName))) {
                    //alert("found");
                    //debugger;
                    //}
                }
                var unique = [...new Set(conceptRDFType.map(item => item))];
                // alert(unique);
                //alert(conceptRDFType);
                e.text = conceptRDFType;
            }

        </script>
