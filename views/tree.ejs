<% include header %>
  <div class="container">
    <!-- <div class="col-sm-12  col-md-12" style="padding-top: 2cm"></div> -->
    <div class="ui segment" style="padding-top: 1cm">
      <div class="ui form">
        <div class="three fields">
          <div class="twelve wide field">
            <div class="ui big icon input">
              <label for="input-search" class="sr-only">Search Tree:</label>
              <i class="search icon"></i>
              <input type="input" id="input-search" placeholder="Type a concept to search..." value="">
            </div>
          </div>
          <div class="four wide field">
            <div class="ui checkbox">
              <input type="checkbox" id="chk-ignore-case" name="searchOptions" checked="checked" value="false">
              <label>Ignore Case</label>
            </div>
          </div>
          <div class="six wide field">
            <div class="ui large floating dropdown labeled icon button" style="background:rgba(255,255,255,.5) none" onclick="getSelectedFileName(this);">
              <i class="filter icon"></i>
              <span class="text" id="file_result">Filter Files</span>
              <div class="menu">
                <div class="ui icon search input">
                  <i class="search icon"></i>
                  <input type="text" placeholder="Select File(s)...">
                </div>
                <div class="divider"></div>
                <div id="itemFiles" class="scrolling menu">
                  <div class="item">
                    <div class="ui red empty circular label"></div>
                    ALL Files
                  </div>
                  <%fileNames.forEach(function (item) {%>
                    <div class="item">
                      <div class="ui blue empty circular label"></div>
                      <%= item %>
                    </div>
                    <%});%>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="inline fields">
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="myRadios" id="RDFSViewCheckBox" value="1" checked="checked">
              <label style="padding-right:50px">RDF(S) View</label>
            </div>
          </div>
          <div class="field">
            <div class="ui radio checkbox">
              <input type="radio" name="myRadios" id="SKOSViewCheckBox" value="2">
              <label style="padding-right:50px">SKOS View</label>
            </div>
          </div>
          <div class="field">
            <div class="ui slider checkbox" style="padding-right:50px">
              <input type="checkbox" name="mySliders" id="showTypesCheckBox" tabindex="0">
              <label> Show Concepts Types</label>
            </div>
          </div>
          <div class="field">
            <div class="ui slider checkbox" style="padding-right:50px">
              <input type="checkbox" name="mySliders" id="showFilesCheckBox" tabindex="1">
              <label> Show Concepts Files</label>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="treeContainer" class="col-sm-12  col-md-6" style="  overflow-x: hidden; overflow-y: auto; height: 400px;">
      <br/>
      <div id="notFoundMessage" style="display:none">
      </div>
      <div id="tree" style=" overflow-x: hidden;"></div>
    </div>
    <div id="infoTabs" class="col-sm-12 col-md-6" style="overflow-x: hidden; overflow-y: auto; height: 400px;">
      <div id="externalInfo"></div>
      <ul id="viewList" class="nav nav-tabs" style="display: none">
        <li class="active"><a class="nav-link active" data-toggle="tab" id="showExternalInfo" href="#documentation">Documentation</a></li>
        <li><a class="nav-link" data-toggle="tab" id="sourceCodeTab" href="#sourceCode">Turtle source</a></li>
        <li><a class="nav-link" data-toggle="tab" id="graphTab" href="#showGraph">Concept graph</a></li>
      </ul>
      <div class="tab-content">
        <div class="tab-pane active" id="documentation" role="tabpanel">
          <div id="infoDetails">
            <h2 id="conceptHead" style="display: none; margin-top:9px">Concept Details: </h2>
            <div id="detailTable" style="padding-bottom:20px"></div>
            <div id="domainTable" style="display: none; padding-bottom:20px"></div>
            <div id="rangeTable" style="display: none; padding-bottom:20px"></div>
            <div id="instancesTable" style="display: none"></div>
            <h4 id="instanceHead" style="display: none; margin-top:9px"></h4>
            <div id="instanceDetailsTable" style="display: none"></div>
          </div>
        </div>
        <div class="tab-pane" class="tabContent" id="sourceCode" role="tabpanel">
          <h4 style="margin-top:9px">Source Code:</h4>
          <!-- <textarea id="code" name="code"></textarea> -->
          <div id="yasqe" style="overflow: hidden"></div>
        </div>
        <div class="tab-pane" class="tabContent" id="showGraph" role="tabpanel">
          <h4 style="margin-top:9px">Graph Representation:</h4>
          <div id='graph'></div>
        </div>
      </div>
    </div>
  </div>
  <% include footer %>
    <!-- End of expressJS coding-->

    <!-- Start of javascript coding-->
    <script>
      // get all the data from route.tree.js
      var RDFSData = <%- JSON.stringify(data) %>;
      var SKOSData = <%- JSON.stringify(SKOSData) %>;
      var mixRDFConcepts = <%- JSON.stringify(allRDFObjects) %>;
      var mixSKOSConcepts = <%- JSON.stringify(allSKOSObjects) %>;
      var isfileNameSelected = false;
      var currentFiles = <%- JSON.stringify(fileNames) %>;
      var RDFObjPlusURI = <%- JSON.stringify(RDFObjectsPlusURI) %>;
      var SKOSObjPlusURI = <%- JSON.stringify(SKOSObjectsPlusURI) %>;
      // store the selected concept
      var conceptSelected = "";
      // store current elements in the tree, it has RDFS concepts initially
      var currentTreeData = RDFSData;
      // store which file is selected from the dropdown menuSize
      var currentSelectedFile = "ALL Files";

      // initilaiztion of ui elements
      $('.ui.radio.checkbox').checkbox();
      $('.ui.dropdown').dropdown();
      $('.ui.checkbox').checkbox();


      // show SKOS concepts on treeview
      function showSKOSTree(data, file) {
        // Just one check is on not both
        if (isCheckedshowTypesCheckBox)
          $('#showFilesCheckBox').prop('checked', false);
        if (isCheckedshowFilesCheckBox)
          $('#showTypesCheckBox').prop('checked', false);
        // set as current data tree to check for types or files show checkbox clicks
        //if (file === "ALL Files") {
        currentTreeData = data;
        var viewData = data;

        var allParents = getUniqueParents(viewData);
        var data = [];
        var j = 0;
        for (var i = 0; i < allParents.length; i++) {
          if (allParents[i] && isConceptInside(allParents[i])) {
            data[j++] = getParentWithChildren(viewData, allParents[i], "SKOS");
          }
        }
        if ($('#showTypesCheckBox').is(':checked')) {
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes'))
              for (var j = 0; j < data[i].nodes.length; j++) {
                data[i].nodes[j].text = data[i].nodes[j].child;
                data[i].nodes[j].tags = ['<a  class="ui tiny teal tag label">' + data[i].nodes[j].RDFType + '</a>'];
              }
          }
        } else if ($('#showFilesCheckBox').is(':checked')) {
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes')) {
              for (var j = 0; j < data[i].nodes.length; j++) {
                data[i].nodes[j].text = data[i].nodes[j].child;
                data[i].nodes[j].tags = ['<a  class="ui tiny pink tag label">' + data[i].nodes[j].fileName + '</a>'];
              }
            }
          }
        } else {
          // set node.text to child from JSON
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes'))
              for (var j = 0; j < data[i].nodes.length; j++) {
                data[i].nodes[j].text = data[i].nodes[j].child;
                data[i].nodes[j].tags = [''];
              }
          }
        }
        // sorting the tree before viewing
        data.sort(function(a, b) {
          return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b.text.toLowerCase()) ? 1 : -1));
        });
        // make array unique
        data = uniqueArray(data);
        // rebuild tree with the new SKOS data
        //}
        if (file !== "ALL Files") {
          data = getSKOSFileData(data, file);
          currentTreeData = data;
        }
        buildTree(data);
      }

      // get getExternalsConcepts for either SKOS or RFS(S)
      function getExternalsConcepts() {
        var externalConcepts = [];
        if ($('#SKOSViewCheckBox').is(':checked')) {
          var internals = [];
          mixSKOSConcepts.forEach(function(item) {
            for (var i = 0; i < SKOSData.length; i++) {
              if (item === SKOSData[i].child || item === SKOSData[i].parent) {
                internals.push(item);
              }
            }
          });
          externalConcepts = $(mixSKOSConcepts).not(internals).get();
        }
        if ($('#RDFSViewCheckBox').is(':checked')) {
          var internals = [];
          mixRDFConcepts.forEach(function(item) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (item === RDFSData[i].concept) {
                internals.push(item);
              }
            }
          });
          externalConcepts = $(mixRDFConcepts).not(internals).get();
        }
        return externalConcepts;
      }


      // show full tree for the first time
      // since RDFS checkbox is clicked by default
      showRDFSTree(RDFSData, currentSelectedFile);
      // check for radios RDFS or SKOS Views
      $('input:radio')
        .on('change', function(event) {
          currentSelectedFile = "ALL Files";
          resetViews();
        });

      // make unique concept in  tree
      function uniqueArray(array) {
        var a = array.concat();
        for (var i = 0; i < a.length; i++) {
          for (var j = i + 1; j < a.length; j++) {
            if (a[i].text === a[j].text) {
              a.splice(j--, 1);
            }
          }
        }
        return a;
      }

      // show info. for external Concepts and thier instaces
      function showExternalInfo(str) {
        var ExteralURI = getExternalURI(str);
        // check if hideExternalConceptsCheckBox is checked
        if ($('#hideExternalConceptsCheckBox').is(':checked')) {
          $('#hideExternalConceptsCheckBox').prop('checked', false);
          if ($('#SKOSViewCheckBox').is(':checked')) {
            showSKOSTree(SKOSData, currentSelectedFile);
          } else {
            showRDFSTree(RDFSData, currentSelectedFile);
          }
        }
        // check if URI for external concept is exist
        if (ExteralURI) {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          // var externalURITable = '<table class="ui very basic table" >' +
          // '<colgroup> <col class="col-md-4"> </colgroup>' +
          var externalURITable = '<div class="ui attached error message">' +
            '<div class="header"> This concept is outside this Ontology </div></div>';
          //'</tr></thread>';
          // check if it URL ends with "/"
          if (ExteralURI[ExteralURI.length - 1] === ('/')) {
            var link = '<a href=' + ExteralURI.slice(0, -1) + '>' + ExteralURI.slice(0, -1) + '</a>';
          } else {
            var link = '<a href=' + ExteralURI + '>' + ExteralURI + '</a>';
          }
          //show info. about the external concept
          externalURITable += '<div class="ui bottom attached fluid segment"> For more details, please click the following link: <br/><br/> ' + link;
          externalURITable += '</div>';
          $('#infoTabs').show();
          $('a[href="#documentation"]').click();
          $('#sourceCodeTab').hide();
          $('#graphTab').hide();
          $('#infoDetails').show();
          $("#domainTable").hide();
          $("#rangeTable").hide();
          $("#instancesTable").hide();
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#conceptHead").show();
          if (ExteralURI[ExteralURI.length - 1] === ('/')) {
            var str = ExteralURI.slice(0, -1);
            $("#conceptHead").html('<p > Concept Details for : <code>' + trimHash(trimSlash(str)) + '</code></p>');
          } else {
            $("#conceptHead").html('<p > Concept Details for : <code>' + trimHash(replaceWithRDFType(trimSlash(ExteralURI))) + '</code></p>');
          }
          $('#detailTable').html(externalURITable);
          $('#detailTable').transition('shake')
          var endpoint = "http://localhost:3030/ds/sparql?query=";
          var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(ExteralURI) + '> }';
          var method = "POST";
          //  async = true.
          var async = true;
          var request = new XMLHttpRequest();
          request.onload = function() {
            var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
            var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
            var instances = data.results.bindings;
            if (instances[0] != null) {
              var instancesTable = '<table class="ui pink table" >' +
                '<colgroup> <col class="col-md-4"> </colgroup>' +
                '<tr>' +
                '<th>Instances</th>' +
                '</tr>';
              for (var i = 0; i < instances.length; i++) {
                var instanceURI = instances[i]["s"].value;
                var key1 = trimHash(trimSlash(instanceURI));
                key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';
                instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
              }
              instancesTable += '</table> ';
              $("#instancesTable").show();
              $("#instancesTable").html(instancesTable);
            } else {
              $("#instancesTable").hide();
              $("#instanceHead").hide();
              $("#instanceDetailsTable").hide();
            }
          }
          request.open(method, endpoint + querystring, true);
          request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
          // send the request to the server.
          request.send();
        } else {
          infoTabs
          $('#infoTabs').hide();
          $('#infoDetails').hide();
          $("#externalInfo").show();
          $("#externalInfo").html('<p > Concept is External still has no URI</p>');
        }
      }

      //show treeview with types or files
      function showRDFSTree(data, file) {
        // set currentTreeData to RDFS data
        var viewData = RDFSData;
        currentTreeData = RDFSData;
        // only one chec is on not both
        if (isCheckedshowTypesCheckBox)
          $('#showFilesCheckBox').prop('checked', false);
        if (isCheckedshowFilesCheckBox)
          $('#showTypesCheckBox').prop('checked', false);
        var allParents = getUniqueParents(viewData);
        var data = [];
        var j = 0;
        if ($('#showFilesCheckBox').is(':checked')) {
          for (var i = 0; i < viewData.length; i++) {
            viewData[i].text = viewData[i].concept;
            viewData[i].tags = ['<a  class="ui tiny pink tag label">' + viewData[i].fileName + '</a>'];
          }
          for (var i = 0; i < allParents.length; i++) {
            if (allParents[i] && isConceptInside(allParents[i])) {
              data[j++] = getParentWithChildren(viewData, allParents[i], 'fileTag');
            }
          }
        } else if ($('#showTypesCheckBox').is(':checked')) {
          for (var i = 0; i < viewData.length; i++) {
            viewData[i].text = viewData[i].concept;
            viewData[i].tags = ['<a  class="ui tiny teal tag label">' + viewData[i].RDFType + '</a>'];
          }
          for (var i = 0; i < allParents.length; i++) {
            if (allParents[i]) {
              data[j++] = getParentWithChildren(viewData, allParents[i], 'typeTag');
            }
          }
        } else if (!$('#showTypesCheckBox').is(':checked') && !$('#showFilesCheckBox').is(':checked')) {
          for (var i = 0; i < viewData.length; i++) {
            viewData[i].text = viewData[i].concept;
            viewData[i].tags = [''];
          }
          for (var i = 0; i < allParents.length; i++) {
            if (allParents[i]) {
              data[j++] = getParentWithChildren(viewData, allParents[i]);
            }
          }
        }
        for (var i = 0; i < viewData.length; i++) {
          if (viewData[i].parent === "")
            data[j++] = viewData[i];
        }

        if (file !== "ALL Files") {
          data = getRDFSFileData(data, file);
          currentTreeData = data;
        }
        $('#notFoundMessage').hide();
        $("#tree").show();
        // make array unique
        data = uniqueArray(data);
        // sorting the tree before viewing
        data.sort(function(a, b) {
          if (a.text && b.text) {
            return ((a.text.toLowerCase() == b.text.toLowerCase()) ? 0 : ((a.text.toLowerCase() > b.text.toLowerCase()) ? 1 : -1));
          }
        });
        debugger;
        // rebuild tree with the new data
        buildTree(data);
      }

      // regenerate the tree according to the new data
      function buildTree(data) {
        $('#tree').treeview({
          data: data, // data is not optional
          levels: 5,
          showTags: true,
          enableLinks: true,
          icon: "glyphicon glyphicon-chevron-right",
          selectedIcon: "glyphicon glyphicon-chevron-right",
          onNodeSelected: function(event, node) {
            if (node.hasOwnProperty('child')) { // child right now only a property for SKOS object
              var str;
              $('#externalInfo').hide();
              // display infoTabs and graph and documentation
              exec(node.childURI, "SKOS");
              // show source code
              showTurtleSource(node.childURI, "SKOS");
            } else {
              if (node.concept) {
                event.stopPropagation();
                $('#externalInfo').hide();
                $('#infoDetails').show();
                $('#viewList').show();
                exec(node.concept);
                showInstances(node.concept);
                showTurtleSource(node.concept);
                conceptSelected = node.concept;
              } else if (node.hasOwnProperty('nodes')) { //check for SKOS parents nodes
                if (node.nodes[0].hasOwnProperty('child')) {
                  $('#externalInfo').hide();
                  // display infoTabs and graph and documentation
                  exec(node.nodes[0].parentURI, "SKOS");
                  // show source code
                  showTurtleSource(node.nodes[0].parentURI, "SKOS");
                } else if (isConceptInside(node.text)) { //check for RDFS parents nodes
                  event.stopPropagation();
                  $('#externalInfo').hide();
                  $('#infoDetails').show();
                  $('#viewList').show();
                  exec(node.text);
                  showInstances(node.text);
                  showTurtleSource(node.text);
                  conceptSelected = node.text;
                }
              } else if (isConceptInside(node.text)) //parent node inside our ontology
              {
                event.stopPropagation();
                $('#externalInfo').hide();
                $('#infoDetails').show();
                $('#viewList').show();
                exec(node.text);
                showInstances(node.text);
                showTurtleSource(node.text);
                conceptSelected = node.text;
              }
            }
          }
        });
      }
      var isCheckedshowFilesCheckBox, isCheckedshowTypesCheckBox;
      // check if showType or showfile checkboxes were clicked
      $('input:checkbox')
        .on('change', function(event) {
          event.preventDefault();
          isCheckedshowFilesCheckBox = ($(this).prop('checked') && $(this).attr('id') == 'showFilesCheckBox') ? true : false;
          isCheckedshowTypesCheckBox = ($(this).prop('checked') && $(this).attr('id') == 'showTypesCheckBox') ? true : false;
          if (($(this).prop('checked') || !$(this).prop('checked')) && $('#SKOSViewCheckBox').is(':checked'))
          showSKOSTree(SKOSData, currentSelectedFile);
          else if (($(this).prop('checked') || !$(this).prop('checked')) && $('#RDFSViewCheckBox').is(':checked'))
            showRDFSTree(RDFSData, currentSelectedFile);
        });

      //show concept was not found as a message
      function conceptNotFoundMessage() {
        <% include notFoundMessage %> // import from notFoundMessage.ejs file
      }

      // Init a timeout variable to be used below
      var timeout = null;
      var searchProcess = false;
      var fireNotFoundMessage = true;
      var search = function(e) {
        var pattern = $('#input-search').val();
        var options = {
          ignoreCase: $('#chk-ignore-case').is(':checked'),
          exactMatch: false,
          revealResults: true
        };
        var results = $('#tree').treeview('search', [pattern, options]);
        currentTreeData = results;
        // wait for user input
        timeout = setTimeout(function() {
          if (results.length === 0) {
            conceptNotFoundMessage();
          }
        }, 1000);

        // rebuild the tree with the search pattern
        if (results)
          buildTree(results);

        if ($('#input-search').val() === '') {
          clearTimeout(timeout);
          resetViews();
        }
      }
      $('#input-search').on('keyup', search);

      // reload the tree of the default elements of either SKOS or RDFS data
      function resetViews() {
        currentSelectedFile = "ALL Files";
        //$('#file_result').html("Filter Files");
        if ($('#SKOSViewCheckBox').is(':checked')) {
          currentTreeData = SKOSData;
          currentSelectedFile = "ALL Files";
          $('#file_result').html("Filter Files");
          getSelectedFileName();
        } else if ($('#RDFSViewCheckBox').is(':checked')) {
          currentSelectedFile = "ALL Files";
          $('#file_result').html("Filter Files");
          currentTreeData = RDFSData;
          getSelectedFileName();
        }
      }

      // remove redundant parents from tree
      function getUniqueParents(data) {
        var out = [];
        var unique = [...new Set(data.map(item => item.parent))];
        unique.forEach(function(item) {
          if (item)
            out.push(item);
        });
        return out;
      }

      // get nodes which are parents and have children
      function getParentWithChildren(data, parent, str) {
        var children = [];
        var parentFile, parentType;
        for (var i = 0; i < data.length; i++) {
          if (data[i].parent === parent) {
            children.push(data[i]);
          }
        }
        if (isConceptInside(parent)) {
          var parentNode = parent;
          for (var i = 0; i < data.length; i++) {
            if (data[i].concept === parent) {
              parentType = data[i].RDFType;
            }
          }
          parentFile = children[0].fileName;

          if (str === "fileTag")
            var tag = ['<a class="ui tiny pink tag label"> ' + parentFile + '</a>'];
          else if (str === "typeTag") {
            var tag = ['<a class="ui tiny teal tag label"> ' + JSON.stringify(parentType) + '</a>'];
          } else {
            var tag = [''];
          }
          //  var tag = ['<div class="ui left pointing red basic label" text-align: right>'+parent+'</div>']
        } else if (str == "SKOS") {
          var parentNode = parent;
          var tag = ['<a class="ui tiny red right ribbon label"> SKOS Parent</a>'];
        }
        var node = {
          text: parentNode,
          tags: [tag],
          nodes: children
        };
        debugger;
        return node;
      }

      // get nodes which are parents
      function getExternals(data) {
        var node = {
          text: data,
          tags: ['<a class="ui left pointing red basic label" > External</a>']
        };
        return node;
      }

      // get RDFS elements of the tree to display  filtered by file
      function getRDFSFileData(result, selectedFileName) {
        var data = result;
        if (selectedFileName) {
          var filteredData = [];
          var k = 0;
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('fileName')) {
              if (data[i].fileName.trim() === selectedFileName) {
                filteredData[k] = data[i];
                k++;
              }
            }
            if (data[i].hasOwnProperty('nodes')) {
              for (var j = 0; j < data[i].nodes.length; j++) {
                if (data[i].nodes[j].fileName)
                  if (data[i].nodes[j].fileName.trim() === selectedFileName) {
                    filteredData[k] = data[i].nodes[j];
                    k++;
                  }
              }
            }
          }
          var allParentsFromFiles = getUniqueParents(filteredData);
          var dataFile = [];
          var j = 0;
          for (var i = 0; i < allParentsFromFiles.length; i++) {
            if (allParentsFromFiles[i]) {
              if ($('#showTypesCheckBox').is(':checked'))
                dataFile[j++] = getParentWithChildren(filteredData, allParentsFromFiles[i], 'typeTag');
              else if ($('#showFilesCheckBox').is(':checked'))
                dataFile[j++] = getParentWithChildren(filteredData, allParentsFromFiles[i], 'fileTag');
              else
                dataFile[j++] = getParentWithChildren(filteredData, allParentsFromFiles[i]);
            }
          }
          for (var i = 0; i < filteredData.length; i++) {
            if (filteredData[i].parent === "") {
              dataFile[j++] = filteredData[i];

            }
          }
          data = dataFile;
        }
        return data;
      }

      // get SKOS elements of the tree to display filtered by file
      function getSKOSFileData(result, selectedFileName) {
        var data = result;
        var filteredData = [];
        var k = 0;
        if (selectedFileName) {
          for (var i = 0; i < data.length; i++) {
            if (data[i].hasOwnProperty('nodes')) {
              for (var j = 0; j < data[i].nodes.length; j++)
                if (data[i].nodes[j]['fileName'].trim() === selectedFileName) {
                  filteredData[k] = data[i];
                  k++;
                }
            }
          }
        } else {
          if (data[i]['fileName'].trim() === selectedFileName) {
            filteredData[k] = data[i];
            k++;
          }
        }
        //TODO: filter childern of parents
        return filteredData;
      }

      // Get the word after slash char of a string
      function trimSlash(str) {
        if (str.includes("/")) {
          var n = str.split("/").pop(-1);;
          return n;
        } else {
          return str;
        }
      }

      // Get the word after hash char of a string
      function trimHash(str) {
        if (str.includes("#")) {
          var n = str.split('#');;
          var p = n[n.length - 1];
          return p;
        } else {
          return str;
        }
      }

      // Customization of the RDF type to show as in standards
      function replaceWithRDFType(str) {
        if (str.includes("22-rdf-syntax-ns")) {
          return "rdf:" + trimHash(str);
        } else if (str.includes('rdf-schema'))
          return "rdfs:" + trimHash(str);
        else if (str.includes('owl'))
          return "owl:" + trimHash(str);
        else if (str.includes('core#Concept') || str.includes('narrower') || str.includes('broader'))
          return "skos:" + trimHash(str);
        else
          return str;
      }

      //check if concept is in our ontology or external
      function isConceptInside(str) {
        //array.find(x => x.name === 'string 1')
        if ($('#SKOSViewCheckBox').is(':checked')) {
          if (SKOSData.find(x => x.child === str) || SKOSData.find(x => x.parent === str)) {
            return true;
          }
        } else if ($('#RDFSViewCheckBox').is(':checked')) {
          if (RDFSData.find(x => x.concept === str)) {
            return true;
          }
        }
        return false;
      }

      // check if the concept is external
      function isConceptExternal(str) {
        var externalConcepts = getExternalsConcepts();
        for (var i = 0; i < externalConcepts.length; i++) {
          if (str === externalConcepts[i]) {
            return true;
          }
        }
        return false;
      }

      // get externalURI
      function getExternalURI(str) {
        var array = [];
        if ($('#SKOSViewCheckBox').is(':checked')) {
          array = SKOSObjPlusURI;
        } else if ($('#RDFSViewCheckBox').is(':checked')) {
          array = RDFObjPlusURI;
        }
        for (var i = 0; i < array.length; i++) {
          if (str === array[i].object)
            return array[i].URI;
        }
        return;
      }

      // update dropDownMenu with SKOS fileNames
      function getSKOSFiles() {
        $('#itemFiles').html('');
        var SKOSFiles = [];
        for (var i = 0; i < SKOSData.length; i++) {
          if (SKOSData[i].fileName)
            SKOSFiles.push(SKOSData[i].fileName);
        }
        SKOSFiles = [...new Set(SKOSFiles.map(item => item))];
        $('#itemFiles').append('<div  class="item"><div class="ui red empty circular label"></div> ALL Files</div>');
        SKOSFiles.forEach(function(item) {
          $('#itemFiles').append('<div class="item"><div class="ui blue empty circular label"></div> ' + item + ' </div>');
        });
        $('.ui.dropdown').dropdown("refresh");
      }

      // update dropDownMenu with RDFS fileNames
      function getRDFSFiles() {
        $('#itemFiles').html('');
        var RDFSFiles = [];
        for (var i = 0; i < RDFSData.length; i++) {
          if (RDFSData[i].fileName)
            RDFSFiles.push(RDFSData[i].fileName);
        }
        RDFSFiles = [...new Set(RDFSFiles.map(item => item))];
        $('#itemFiles').append('<div  class="item"><div class="ui red empty circular label"></div>ALL Files</div>');
        RDFSFiles.forEach(function(item) {
          $('#itemFiles').append('<div class="item"><div class="ui blue empty circular label"></div> ' + item + ' </div>');
        });
        $('.ui.dropdown').dropdown("refresh");

      }

      //var currentSelectedFile = '';
      // get selected fileNames for dropDownMenu and rebuild treeview
      function getSelectedFileName() {
        var selectedFileName = $('.ui.dropdown').dropdown('get text');
        // fill the dropdown menu of the either SKOS or RDFS files
        if ($('#SKOSViewCheckBox').is(':checked')) {
          getSKOSFiles();
        } else if ($('#RDFSViewCheckBox').is(':checked')) {
          getRDFSFiles();
        }

        selectedFileName = selectedFileName.trim();
        if (selectedFileName != "Filter Files") {
          $('#infoTabs').hide(); //hide previos infoTabs
          if (selectedFileName) {
            selectedFileName = selectedFileName.trim();
          }
          if (selectedFileName === "ALL Files") {
            if ($('#SKOSViewCheckBox').is(':checked')) {
              showSKOSTree(SKOSData, "ALL Files");
            } else if ($('#RDFSViewCheckBox').is(':checked')) {
              showRDFSTree(RDFSData, "ALL Files");
            }
          } else {
            currentSelectedFile = selectedFileName;
            if ($('#SKOSViewCheckBox').is(':checked')) {
              $('#infoTabs').hide(); //hide previos infoTabs
              showSKOSTree(SKOSData, selectedFileName);
            } else {
              $('#infoTabs').hide(); //hide previos infoTabs
              showRDFSTree(RDFSData, selectedFileName);
            }
          }
        } else {
          if ($('#SKOSViewCheckBox').is(':checked')) {
            $('#infoTabs').hide(); //hide previos infoTabs
            showSKOSTree(currentTreeData, currentSelectedFile);
          } else {
            $('#infoTabs').hide(); //hide previos infoTabs
            showRDFSTree(currentTreeData, currentSelectedFile);
          }
        }
      }

      // show info. details of clicked instance
      function showInstanceDetails(instanceURI) {
        var endpoint = "http://localhost:3030/ds/sparql?query=";
        var querystring = 'SELECT  ?p ?o WHERE {  <' + encodeURIComponent(instanceURI) + '> ?p ?o }';
        var method = "POST";
        var async = true;
        var request = new XMLHttpRequest();
        request.onload = function() {
          var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
          var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
          var instances = data.results.bindings;
          if (instances[0] != null) {
            var instancesDetailsTable = '<table class="ui blue celled table" >' +
              // '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
              '<thead><tr class="info">' +
              '<th>Predicate</th>' +
              '<th>Object</th>' +
              '</tr></thead>';
            for (var i = 0; i < instances.length; i++) {
              var key1 = instances[i]['p'].value;
              var key2 = instances[i]['o'].value;
              var key3 = instances[i]['o']['xml:lang'];
              var key4 = instances[i]['o']['type'];

              //check if object is uri end with "/"
              if (key2.includes("http://") && key1.includes("seeAlso")) {
                if (key2[key2.length - 1] === ('/'))
                  key2 = key2.slice(0, -1);
                key2 = '<a href=' + key2 + '>' + key2 + '</a>';
              }
              key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
              key2 = trimHash(replaceWithRDFType(trimSlash(instances[i]['o'].value)));

              if (key1.includes("broader") || key1.includes("narrower")) {
                key2 = '<a href="#" onmousedown="exec(&quot;' + key2URI + '&quot;,&quot;SKOS&quot;); return false; ">' + key2 + '</a>';
              }
              if (isConceptExternal(key2) && !key1.includes("label") && key4 === "uri") {
                key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              if (key1.includes("label")) {
                if (key3)
                  key2 = key2 + '@' + key3;
              }

              instancesDetailsTable += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            }
            instancesDetailsTable += '</table> ';
            $("#instanceHead").show();
            $("#instanceHead").html('<h3> Instance Details for :<code>' + trimHash(replaceWithRDFType(trimSlash(instanceURI))) + '</code></h3>');
            $("#instanceDetailsTable").show();
            $("#instanceDetailsTable").html(instancesDetailsTable);
            //$("#infoTabs").scrollTop($("#infoTabs")[0].scrollHeight);
            document.getElementById("instanceHead").scrollIntoView()

          } else {
            $("#instanceHead").hide();
            $("#instanceDetailsTable").hide();
          }
        }
        request.open(method, endpoint + querystring, true);
        request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
        //send the request to the server.
        request.send();
      }

      // To display instances of  the selected node
      function showInstances(item) {
        var conceptURI;
        var isURIExist = false;
        if (item) {
          for (var i = 0; i < RDFSData.length; i++) {
            if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
              conceptURI = RDFSData[i].URI;
              isURIExist = true;
              break;
            }
          }
          if (isURIExist) {
            var endpoint = "http://localhost:3030/ds/sparql?query=";
            var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(conceptURI) + '> }';
            var method = "POST";
            var async = true;
            var request = new XMLHttpRequest();
            request.onload = function() {
              var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
              var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
              var instances = data.results.bindings;
              if (instances[0] != null) {
                var instancesTable = '<table class="ui red table" >' +
                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                  '<tr>' +
                  '<th>Instances</th>' +
                  '</tr>';
                for (var i = 0; i < instances.length; i++) {
                  var instanceURI = instances[i]["s"].value;
                  var key1 = trimSlash(instances[i]["s"].value);
                  key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';
                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                }
                instancesTable += '</table> ';
                $("#instancesTable").show();
                $("#instancesTable").html(instancesTable);
              } else {
                $("#instancesTable").html("");
                $("#instancesTable").hide();
                $("#instanceHead").hide();
                $("#instanceDetailsTable").hide();
              }
            }
            request.open(method, endpoint + querystring, true);
            request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
            //  the request is sent to the server.
            request.send();
          } else
            $("#instancesTable").html('<p>No node was selected !!!</p>');
        }
      }

      // To display Turtle source for the selected node
      function showTurtleSource(item, view) {
        var conceptURI;
        var isURIExist = false;
        if (view == "SKOS") {
          conceptURI = item;
          isURIExist = true;
        } else {
          if (item) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else if (conceptSelected) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (conceptSelected.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else
            isURIExist = false;
        }
        if (isURIExist) {
          var endpoint = "http://localhost:3030/ds/sparql?query="
          var querystring = 'CONSTRUCT{<' + encodeURIComponent(conceptURI) + '> ?p ?o .}WHERE {<' + encodeURIComponent(conceptURI) + '> ?p ?o .}'
          $('div.yasqe').remove();
          $.ajax({
            type: 'GET',
            url: endpoint + querystring,
            headers: {
              Accept: 'application/x-www-form-urlencoded;charset=UTF-8'
            },
            success: function(data, textStatus, jqXHR) {
              $('#sourceCodeTab').show();
              var config = {
                createShareLink: false,
                readOnly: true,
                syntaxErrorCheck: false,
                lineNumbers: false,
                autofocus: false
              };
              var yasqe = YASQE(document.getElementById("yasqe"), config);
              yasqe.setOption("viewportMargin", Infinity)
              yasqe.refresh()
              yasqe.on('blur', function() {
                yasqe.refresh();
              });
              yasqe.setValue(data);
              //yasqe.focus();
              //$(".CodeMirror-vscrollbar").scrollTop($(".CodeMirror-vscrollbar")[0].scrollHeight);

              // $('.yasqe').each(function(i, el) {
              //   el.yasqe.refresh();
              // });
              $("div.CodeMirror-gutters").remove();
              $("div.yasqe_buttons").remove();
              //setTimeout(yasqe.refresh, 3000)

              // var $wrapper = $(yasqe.getWrapperElement());
              // $wrapper.addClass('CodeMirror-readonly'); // hides cursor
              //debugger;
            },
            error: function(e) {
              console.log(e);
            }
          });
        } else
          $("#yasqe").html('<p>No node was selected !!!</p>');
      }

      // Function to query sparql endpoint return graph and queryResult
      function exec(item, view) {
        var str = "";
        var isURIExist = false;
        var conceptURI;
        conceptSelected = item;

        if (view === "SKOS") {
          conceptURI = item;
          isURIExist = true;
        } else {
          for (var i = 0; i < RDFSData.length; i++) {
            if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
              conceptURI = RDFSData[i].URI;
              isURIExist = true;
              break;
            }
          }
        }
        // highlight the selected node
        var selectedNode = $('#tree').treeview('getSelected');
        if (selectedNode[0].concept != item && view !== "SKOS") {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          // scroll to the clicked node from documentation and select the node
          const callback = element => element.innerHTML == item;
          const elements = Array.from(document.getElementsByTagName('a'));
          const result = elements.filter(callback);
          var $s = $('#treeContainer');
          //  get nodeid of string node.text
          var liTop = $s.find('[data-nodeid=' + parseInt(result[0].parentNode.dataset.nodeid) + ']').offset().top;
          var ulTop = $s.offset().top;
          // scroll to the selected node
          $s.scrollTop($s.scrollTop() + (liTop - ulTop));
          // select the node of the treeview
          $('#tree').treeview('selectNode', [parseInt(result[0].parentNode.dataset.nodeid), {
            silent: true
          }]);
        }
        if (view === "SKOS") {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          // scroll to the clicked node from documentation and select the node
          const callback = element => element.innerHTML == trimHash(replaceWithRDFType(trimSlash(item)));
          const elements = Array.from(document.getElementsByTagName('a'));
          const result = elements.filter(callback);
          var $s = $('#treeContainer');
          //  get nodeid of string node.text
          var liTop = $s.find('[data-nodeid=' + parseInt(result["0"].firstChild.parentNode.offsetParent.dataset.nodeid) + ']').offset().top;
          var ulTop = $s.offset().top;
          // scroll to the selected node
          $s.scrollTop($s.scrollTop() + (liTop - ulTop));
          // select the node of the treeview
          $('#tree').treeview('selectNode', [parseInt(result["0"].firstChild.parentNode.offsetParent.dataset.nodeid), {
            silent: true
          }]);
        }
        if (isURIExist) {
          var endpoint = "http://localhost:3030/ds/sparql"
          var sparql = 'SELECT  ?p ?o WHERE {  <' + conceptURI + '> ?p ?o }  '
          d3sparql.query(endpoint, sparql, render)
        }
      }

      // Function to display data in tables on the page
      function render(json) {
        var dataSPARQL = json.results.bindings;
        var conceptHasRange = "";
        var conceptHasDomain = "";
        var conceptLabel;
        var table = '<table class="ui green celled striped table" >' +
          '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
          '<tr class="positive">' +
          '<th>Predicate</th>' +
          '<th>Object</th>' +
          '</tr>';
        var rangeTable = '<table class="ui yellow celled striped table" >' +
          '<colgroup> <col class="col-md-6"> </colgroup>' +
          '<tr class="warning">' +
          '<th>Values expected to be one of these types</th>' +
          '</tr>';
        var domainTable = '<table class="ui brown celled striped table" >' +
          '<colgroup> <col class="col-md-6"> </colgroup>' +
          '<tr class="negative">' +
          '<th>Used on these types</th>' +
          '</tr>';
        for (var i = 0; i < dataSPARQL.length; i++) {
          var key1 = trimHash(replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value)));
          var key2 = dataSPARQL[i]['o'].value;
          var key2URI = key2;

          //check if object is uri
          if (key2.includes("http://") && key1.includes("seeAlso")) {
            if (key2[key2.length - 1] === ('/'))
              key2 = key2.slice(0, -1);
            key2 = '<a href=' + key2 + '>' + key2 + '</a>';
          } else
            key2 = trimHash(replaceWithRDFType(trimSlash(key2)));

          var key3 = dataSPARQL[i]['o']['xml:lang'];
          var key4 = dataSPARQL[i]['o']['type'];
          if (key1.includes("domain")) {
            conceptHasDomain = key1;
            if (isConceptInside(key2) && key4 === "uri")
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            else if (isConceptExternal(key2) && key4 === "uri")
              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';
          } else if (key1.includes("range")) {
            conceptHasRange = key1;
            if (isConceptInside(key2) && key4 === "uri")
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            else if (isConceptExternal(key2) && key4 === "uri")
              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';
          } else {
            if (key1.includes("broader") || key1.includes("narrower")) {
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2URI + '&quot;,&quot;SKOS&quot;); return false; ">' + key2 + '</a>';
            }
            if (isConceptExternal(key2) && !key1.includes("label") && key4 === "uri") {
              key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            }
            if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
              key2 = '<a href="#" onmousedown="exec(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
            }
            if (key1.includes("label")) {
              if (key3)
                key2 = key2 + '@' + key3;
            }
            table += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
          }
        }
        //end of tables
        table += '</table> ';
        domainTable += '</table> ';
        rangeTable += '</table> ';
        $('#infoTabs').show();
        //display returned data on the Html tables
        $("#conceptHead").show();
        if (conceptSelected.includes("http://")) { //check if it skosURI
          conceptSelected = trimHash(trimSlash(conceptSelected));
        }
        $("#conceptHead ").html('<p > Concept Details: <code>' + conceptSelected + '</code></p>');
        $("#infoDetails").show();
        $('#viewList').show();
        // domainTable has some values to show
        if (!conceptHasDomain == "")
          $("#domainTable").show();
        else
          $("#domainTable").hide();
        // rangeTable has some values to show
        if (!conceptHasRange == "")
          $("#rangeTable").show();
        else {
          $("#rangeTable").hide();
        }
        $("#detailTable").html(table);
        $("#domainTable").html(domainTable);
        $("#rangeTable").html(rangeTable);
        $("#sourceCodeTab").show();

        //To display on graph
        var config = {
          "radius": 20,
          "charge": -100,
          "distance": 10,
          "width": 500,
          "height": 310,
          "selector ": '#showGraph'
        };
        d3sparql.forcegraph(json, config);
        $('#graph').html('');
        $('#graphTab').show();
        $('div.d3sparql.forcegraph').appendTo($('#graph'));
      }

      // To display in TabView
      $(document).ready(function(e) {
        $(document).on('click', 'a[href="#"]', function(e) {
          e.preventDefault();
        });
      });
    </script>
    <!-- End of javascript coding-->
