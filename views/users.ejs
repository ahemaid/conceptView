<% include header %>

    <h1><%-title %></h1>
    <p>Welcome to
        <%-title %>
    </p>

    <br>
    <!--script src="http://igniteui.com/js/modernizr.min.js"></script>
    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.min.js"></script>
    <script src="http://cdn-na.infragistics.com/igniteui/latest/js/infragistics.core.js"></script>
    <script src="http://cdn-na.infragistics.com/igniteui/latest/js/infragistics.lob.js"></script>
    <link href="http://cdn-na.infragistics.com/igniteui/latest/css/themes/infragistics/infragistics.theme.css" rel="stylesheet"></link>
    <link href="http://cdn-na.infragistics.com/igniteui/latest/css/structure/infragistics.css" rel="stylesheet"></link>

    <ul id="tree"></ul>

    <script>
        $(function() {

            var data = [{
                "ID": 1,
                "RegionName": "North America",
                "Countries": [{
                    "ID": 1,
                    "CountryName": "United States"
                }, {
                    "ID": 2,
                    "CountryName": "Canada"
                }, {
                    "ID": 3,
                    "CountryName": "Mexico"
                }]
            }, {
                "ID": 2,
                "RegionName": "South America",
                "Countries": [{
                    "ID": 4,
                    "CountryName": "Brazil"
                }, {
                    "ID": 5,
                    "CountryName": "Uruguay"
                }]
            }, {
                "ID": 3,
                "RegionName": "Europe",
                "Countries": [{
                    "ID": 6,
                    "CountryName": "United Kingdom"
                }, {
                    "ID": 7,
                    "CountryName": "Germany"
                }, {
                    "ID": 8,
                    "CountryName": "Bulgaria"
                }]
            }];

            $("#tree").igTree({
                dataSource: data, //JSON Array defined above
                bindings: {
                    textKey: "RegionName",
                    valueKey: "ID",
                    childDataProperty: "Countries",
                    bindings: {
                        textKey: "CountryName",
                        valueKey: "ID"
                    }
                }
            });
        });

    </script-->
    <!--a href="/ChargingPoint">ChargingStationI</a>
    <p> Here is just a page for test</p>
    <br>
    <!--div class="row">
        <hr>
        <h2>Searchable Tree</h2>
        <div class="col-sm-4">
            <h2>Input</h2>
    <div class="form-group">
        <label for="input-search" class="sr-only">Search Tree:</label>
        <input type="input" class="form-control" id="input-search" placeholder="Type to search..." value="">
    </div>
    <div class="checkbox">
        <label>
            <input type="checkbox" class="checkbox" id="chk-ignore-case" value="true"> Ignore Case
        </label>
    </div>
    <div class="checkbox">
        <label>
            <input type="checkbox" class="checkbox" id="chk-exact-match" value="false"> Exact Match
        </label>
    </div>
    <div class="checkbox">
        <label>
            <input type="checkbox" class="checkbox" id="chk-reveal-results" value="true"> Reveal Results
        </label>
    </div>
    <button type="button" class="btn btn-success" id="btn-search">Search</button>
    <button type="button" class="btn btn-default" id="btn-clear-search">Clear</button>
    </form>
    </div>
    <div class="col-sm-4">
        <h2>Tree</h2>
        <div id="treeview12" class=""></div>

    </div>
    <div class="col-sm-4">
        <h2>Results</h2>
        <div id="search-output"></div>
    </div>


    <script>
        var json = '[' +
            '{' +
            '"text": "Parent 1",' +
            '"nodes": [' +
            '{' +
            '"text": "Child 1",' +
            '"nodes": [' +
            '{' +
            '"text": "Grandchild 1"' +
            '},' +
            '{' +
            '"text": "Grandchild 2"' +
            '}' +
            ']' +
            '},' +
            '{' +
            '"text": "Child 2"' +
            '}' +
            ']' +
            '},' +
            '{' +
            '"text": "Parent 2"' +
            '},' +
            '{' +
            '"text": "Parent 3"' +
            '},' +
            '{' +
            '"text": "Parent 4"' +
            '},' +
            '{' +
            '"text": "Parent 5"' +
            '}' +
            ']';

        var $tree = $('#treeview12').treeview({
                    data: json
                        /**/

                    /*         var tree = [{
                                 text: "Parent 1",
                                 nodes: [{
                                     text: "Child 1",
                                     nodes: [{
                                         text: "Grandchild 1"
                                     }, {
                                         text: "Grandchild 2"
                                     }]
                                 }, {
                                     text: "Child 2"
                                 }]
                             }, {
                                 text: "Parent 2"
                             }, {
                                 text: "Parent 3"
                             }, {
                                 text: "Parent 4"
                             }, {
                                 text: "Parent 5"
                             }];*/

                    /*                function getTree() {
                                        // Some logic to retrieve, or generate tree structure
                                        return tree;
                                    }*/


                    /*
                                    var $searchableTree = $('#treeview-searchable').treeview({
                                        data: getTree(),
                                    });*/


                    /*
                    var search = function(e) {
                      var pattern = $('#input-search').val();
                      var options = {
                        ignoreCase: $('#chk-ignore-case').is(':checked'),
                        exactMatch: $('#chk-exact-match').is(':checked'),
                        revealResults: $('#chk-reveal-results').is(':checked')
                      };
                      var results = $searchableTree.treeview('search', [ pattern, options ]);

                      var output = '<p>' + results.length + ' matches found</p>';
                      $.each(results, function (index, result) {
                        output += '<p>- ' + result.text + '</p>';
                      });
                      $('#search-output').html(output);
                    }

                    $('#btn-search').on('click', search);
                    $('#input-search').on('keyup', search);

                    $('#btn-clear-search').on('click', function (e) {
                      $searchableTree.treeview('clearSearch');
                      $('#input-search').val('');
                      $('#search-output').html('');
                    });
                    */

                    //$(function () {
                    /*                var selectors = {
                                        'tree': '#treeview-searchable',
                                        'input': '#input-search',
                                        'reset': '#btn-clear-search'
                                    };
                                    var lastPattern = ''; // closure variable to prevent redundant operation

                                    // collapse and enable all before search //
                                    function reset(tree) {
                                        tree.collapseAll();
                                        tree.enableAll();
                                    }

                                    // find all nodes that are not related to search and should be disabled:
                                    // This excludes found nodes, their children and their parents.
                                    // Call this after collapsing all nodes and letting search() reveal.
                                    //
                                    function collectUnrelated(nodes) {
                                        var unrelated = [];
                                        $.each(nodes, function(i, n) {
                                            if (!n.searchResult && !n.state.expanded) { // no hit, no parent
                                                unrelated.push(n.nodeId);
                                            }
                                            if (!n.searchResult && n.nodes) { // recurse for non-result children
                                                $.merge(unrelated, collectUnrelated(n.nodes));
                                            }
                                        });
                                        return unrelated;
                                    }

                                    // search callback
                                    var search = function(e) {
                                        var pattern = $(selectors.input).val();
                                        if (pattern === lastPattern) {
                                            return;
                                        }
                                        lastPattern = pattern;
                                        var tree = $(selectors.tree).treeview(true);
                                        reset(tree);
                                        if (pattern.length < 3) { // avoid heavy operation
                                            tree.clearSearch();
                                        } else {
                                            tree.search(pattern);
                                            // get all root nodes: node 0 who is assumed to be
                                            //   a root node, and all siblings of node 0.
                                            var roots = tree.getSiblings(0);
                                            roots.push(tree.getNode(0));
                                            //first collect all nodes to disable, then call disable once.
                                            //  Calling disable on each of them directly is extremely slow! 
                                            var unrelated = collectUnrelated(roots);
                                            tree.disableNode(unrelated, {
                                                silent: true
                                            });
                                        }
                                    };

                                    // typing in search field
                                    $(selectors.input).on('keyup', search);

                                    // clear button
                                    $(selectors.reset).on('click', function(e) {
                                        $(selectors.input).val('');
                                        var tree = $(selectors.tree).treeview(true);
                                        reset(tree);
                                        tree.clearSearch();
                                    });

                                });*/
                    //});

    </script-->
    <div class="container">
        <h1>Bootstrap Tree View</h1>
        <br>

        <div class="row">
            <hr>
            <h2>Searchable Tree</h2>
            <div class="col-sm-4">
                <h2>Input</h2>
                <!-- <form> -->
                <div class="form-group">
                    <label for="input-search" class="sr-only">Search Tree:</label>
                    <input type="input" class="form-control" id="input-search" placeholder="Type to search..." value="">
                </div>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" class="checkbox" id="chk-ignore-case" value="false"> Ignore Case
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" class="checkbox" id="chk-exact-match" value="false"> Exact Match
                    </label>
                </div>
                <div class="checkbox">
                    <label>
                        <input type="checkbox" class="checkbox" id="chk-reveal-results" value="false"> Reveal Results
                    </label>
                </div>
                <button type="button" class="btn btn-success" id="btn-search">Search</button>
                <button type="button" class="btn btn-default" id="btn-clear-search">Clear</button>
                <!-- </form> -->
            </div>
            <div class="col-sm-4">
                <h2>Tree</h2>
                <div id="treeview-searchable" class=""></div>
            </div>
            <div class="col-sm-4">
                <h2>Results</h2>
                <div id="search-output"></div>
            </div>
        </div>
        <div class="row">
            <hr>
            <h2>Data</h2>
            <div class="col-sm-4">
                <h2>JSON Data</h2>
                <div id="treeview12" class=""></div>
            </div>
            <div class="col-sm-4">
                <h2></h2>
                <div id="treeview13" class=""></div>
            </div>
            <div class="col-sm-4">
                <h2></h2>
                <div id="treeview14"></div>
            </div>
        </div>
        <br/>
        <br/>
        <br/>
        <br/>
    </div>

    <!--
    <script type="text/javascript">
        $(function() {
            var defaultData = [{
                text: 'Parent 1',
                href: '#parent1',
                tags: ['4'],
                nodes: [{
                    text: 'Child 1',
                    href: '#child1',
                    tags: ['2'],
                    nodes: [{
                        text: 'Grandchild 1',
                        href: '#grandchild1',
                        tags: ['0']
                    }, {
                        text: 'Grandchild 2',
                        href: '#grandchild2',
                        tags: ['0']
                    }]
                }, {
                    text: 'Child 2',
                    href: '#child2',
                    tags: ['0']
                }]
            }, {
                text: 'Parent 2',
                href: '#parent2',
                tags: ['0']
            }, {
                text: 'Parent 3',
                href: '#parent3',
                tags: ['0']
            }, {
                text: 'Parent 4',
                href: '#parent4',
                tags: ['0']
            }, {
                text: 'Parent 5',
                href: '#parent5',
                tags: ['0']
            }];
            var alternateData = [{
                text: 'Parent 1',
                tags: ['2'],
                nodes: [{
                    text: 'Child 1',
                    tags: ['3'],
                    nodes: [{
                        text: 'Grandchild 1',
                        tags: ['6']
                    }, {
                        text: 'Grandchild 2',
                        tags: ['3']
                    }]
                }, {
                    text: 'Child 2',
                    tags: ['3']
                }]
            }, {
                text: 'Parent 2',
                tags: ['7']
            }, {
                text: 'Parent 3',
                icon: 'glyphicon glyphicon-earphone',
                href: '#demo',
                tags: ['11']
            }, {
                text: 'Parent 4',
                icon: 'glyphicon glyphicon-cloud-download',
                href: '/demo.html',
                tags: ['19'],
                selected: true
            }, {
                text: 'Parent 5',
                icon: 'glyphicon glyphicon-certificate',
                color: 'pink',
                backColor: 'red',
                href: 'http://www.tesco.com',
                tags: ['available', '0']
            }];
            var json = '[' +
                '{' +
                '"text": "Parent 1",' +
                '"nodes": [' +
                '{' +
                '"text": "Child 1",' +
                '"nodes": [' +
                '{' +
                '"text": "Grandchild 1"' +
                '},' +
                '{' +
                '"text": "Grandchild 2"' +
                '}' +
                ']' +
                '},' +
                '{' +
                '"text": "Child 2"' +
                '}' +
                ']' +
                '},' +
                '{' +
                '"text": "Parent 2"' +
                '},' +
                '{' +
                '"text": "Parent 3"' +
                '},' +
                '{' +
                '"text": "Parent 4"' +
                '},' +
                '{' +
                '"text": "Parent 5"' +
                '}' +
                ']';
            $('#treeview1').treeview({
                data: defaultData
            });
            $('#treeview2').treeview({
                levels: 1,
                data: defaultData
            });
            $('#treeview3').treeview({
                levels: 99,
                data: defaultData
            });
            $('#treeview4').treeview({
                color: "#428bca",
                data: defaultData
            });
            $('#treeview5').treeview({
                color: "#428bca",
                expandIcon: 'glyphicon glyphicon-chevron-right',
                collapseIcon: 'glyphicon glyphicon-chevron-down',
                nodeIcon: 'glyphicon glyphicon-bookmark',
                data: defaultData
            });
            $('#treeview6').treeview({
                color: "#428bca",
                expandIcon: "glyphicon glyphicon-stop",
                collapseIcon: "glyphicon glyphicon-unchecked",
                nodeIcon: "glyphicon glyphicon-user",
                showTags: true,
                data: defaultData
            });
            $('#treeview7').treeview({
                color: "#428bca",
                showBorder: false,
                data: defaultData
            });
            $('#treeview8').treeview({
                expandIcon: "glyphicon glyphicon-stop",
                collapseIcon: "glyphicon glyphicon-unchecked",
                nodeIcon: "glyphicon glyphicon-user",
                color: "yellow",
                backColor: "purple",
                onhoverColor: "orange",
                borderColor: "red",
                showBorder: false,
                showTags: true,
                highlightSelected: true,
                selectedColor: "yellow",
                selectedBackColor: "darkorange",
                data: defaultData
            });
            $('#treeview9').treeview({
                expandIcon: "glyphicon glyphicon-stop",
                collapseIcon: "glyphicon glyphicon-unchecked",
                nodeIcon: "glyphicon glyphicon-user",
                color: "yellow",
                backColor: "purple",
                onhoverColor: "orange",
                borderColor: "red",
                showBorder: false,
                showTags: true,
                highlightSelected: true,
                selectedColor: "yellow",
                selectedBackColor: "darkorange",
                data: alternateData
            });
            $('#treeview10').treeview({
                color: "#428bca",
                enableLinks: true,
                data: defaultData
            });
            var $searchableTree = $('#treeview-searchable').treeview({
                data: defaultData,
            });
            var search = function(e) {
                var pattern = $('#input-search').val();
                var options = {
                    ignoreCase: $('#chk-ignore-case').is(':checked'),
                    exactMatch: $('#chk-exact-match').is(':checked'),
                    revealResults: $('#chk-reveal-results').is(':checked')
                };
                var results = $searchableTree.treeview('search', [pattern, options]);
                var output = '<p>' + results.length + ' matches found</p>';
                $.each(results, function(index, result) {
                    output += '<p>- ' + result.text + '</p>';
                });
                $('#search-output').html(output);
            }
            $('#btn-search').on('click', search);
            $('#input-search').on('keyup', search);
            $('#btn-clear-search').on('click', function(e) {
                $searchableTree.treeview('clearSearch');
                $('#input-search').val('');
                $('#search-output').html('');
            });
            var initSelectableTree = function() {
                return $('#treeview-selectable').treeview({
                    data: defaultData,
                    multiSelect: $('#chk-select-multi').is(':checked'),
                    onNodeSelected: function(event, node) {
                        $('#selectable-output').prepend('<p>' + node.text + ' was selected</p>');
                    },
                    onNodeUnselected: function(event, node) {
                        $('#selectable-output').prepend('<p>' + node.text + ' was unselected</p>');
                    }
                });
            };
            var $selectableTree = initSelectableTree();
            var findSelectableNodes = function() {
                return $selectableTree.treeview('search', [$('#input-select-node').val(), {
                    ignoreCase: false,
                    exactMatch: false
                }]);
            };
            var selectableNodes = findSelectableNodes();
            $('#chk-select-multi:checkbox').on('change', function() {
                console.log('multi-select change');
                $selectableTree = initSelectableTree();
                selectableNodes = findSelectableNodes();
            });
            // Select/unselect/toggle nodes
            $('#input-select-node').on('keyup', function(e) {
                selectableNodes = findSelectableNodes();
                $('.select-node').prop('disabled', !(selectableNodes.length >= 1));
            });
            $('#btn-select-node.select-node').on('click', function(e) {
                $selectableTree.treeview('selectNode', [selectableNodes, {
                    silent: $('#chk-select-silent').is(':checked')
                }]);
            });
            $('#btn-unselect-node.select-node').on('click', function(e) {
                $selectableTree.treeview('unselectNode', [selectableNodes, {
                    silent: $('#chk-select-silent').is(':checked')
                }]);
            });
            $('#btn-toggle-selected.select-node').on('click', function(e) {
                $selectableTree.treeview('toggleNodeSelected', [selectableNodes, {
                    silent: $('#chk-select-silent').is(':checked')
                }]);
            });
            var $expandibleTree = $('#treeview-expandible').treeview({
                data: defaultData,
                onNodeCollapsed: function(event, node) {
                    $('#expandible-output').prepend('<p>' + node.text + ' was collapsed</p>');
                },
                onNodeExpanded: function(event, node) {
                    $('#expandible-output').prepend('<p>' + node.text + ' was expanded</p>');
                }
            });
            var findExpandibleNodess = function() {
                return $expandibleTree.treeview('search', [$('#input-expand-node').val(), {
                    ignoreCase: false,
                    exactMatch: false
                }]);
            };
            var expandibleNodes = findExpandibleNodess();
            // Expand/collapse/toggle nodes
            $('#input-expand-node').on('keyup', function(e) {
                expandibleNodes = findExpandibleNodess();
                $('.expand-node').prop('disabled', !(expandibleNodes.length >= 1));
            });
            $('#btn-expand-node.expand-node').on('click', function(e) {
                var levels = $('#select-expand-node-levels').val();
                $expandibleTree.treeview('expandNode', [expandibleNodes, {
                    levels: levels,
                    silent: $('#chk-expand-silent').is(':checked')
                }]);
            });
            $('#btn-collapse-node.expand-node').on('click', function(e) {
                $expandibleTree.treeview('collapseNode', [expandibleNodes, {
                    silent: $('#chk-expand-silent').is(':checked')
                }]);
            });
            $('#btn-toggle-expanded.expand-node').on('click', function(e) {
                $expandibleTree.treeview('toggleNodeExpanded', [expandibleNodes, {
                    silent: $('#chk-expand-silent').is(':checked')
                }]);
            });
            // Expand/collapse all
            $('#btn-expand-all').on('click', function(e) {
                var levels = $('#select-expand-all-levels').val();
                $expandibleTree.treeview('expandAll', {
                    levels: levels,
                    silent: $('#chk-expand-silent').is(':checked')
                });
            });
            $('#btn-collapse-all').on('click', function(e) {
                $expandibleTree.treeview('collapseAll', {
                    silent: $('#chk-expand-silent').is(':checked')
                });
            });
            var $checkableTree = $('#treeview-checkable').treeview({
                data: defaultData,
                showIcon: false,
                showCheckbox: true,
                onNodeChecked: function(event, node) {
                    $('#checkable-output').prepend('<p>' + node.text + ' was checked</p>');
                },
                onNodeUnchecked: function(event, node) {
                    $('#checkable-output').prepend('<p>' + node.text + ' was unchecked</p>');
                }
            });
            var findCheckableNodess = function() {
                return $checkableTree.treeview('search', [$('#input-check-node').val(), {
                    ignoreCase: false,
                    exactMatch: false
                }]);
            };
            var checkableNodes = findCheckableNodess();
            // Check/uncheck/toggle nodes
            $('#input-check-node').on('keyup', function(e) {
                checkableNodes = findCheckableNodess();
                $('.check-node').prop('disabled', !(checkableNodes.length >= 1));
            });
            $('#btn-check-node.check-node').on('click', function(e) {
                $checkableTree.treeview('checkNode', [checkableNodes, {
                    silent: $('#chk-check-silent').is(':checked')
                }]);
            });
            $('#btn-uncheck-node.check-node').on('click', function(e) {
                $checkableTree.treeview('uncheckNode', [checkableNodes, {
                    silent: $('#chk-check-silent').is(':checked')
                }]);
            });
            $('#btn-toggle-checked.check-node').on('click', function(e) {
                $checkableTree.treeview('toggleNodeChecked', [checkableNodes, {
                    silent: $('#chk-check-silent').is(':checked')
                }]);
            });
            // Check/uncheck all
            $('#btn-check-all').on('click', function(e) {
                $checkableTree.treeview('checkAll', {
                    silent: $('#chk-check-silent').is(':checked')
                });
            });
            $('#btn-uncheck-all').on('click', function(e) {
                $checkableTree.treeview('uncheckAll', {
                    silent: $('#chk-check-silent').is(':checked')
                });
            });
            var $disabledTree = $('#treeview-disabled').treeview({
                data: defaultData,
                onNodeDisabled: function(event, node) {
                    $('#disabled-output').prepend('<p>' + node.text + ' was disabled</p>');
                },
                onNodeEnabled: function(event, node) {
                    $('#disabled-output').prepend('<p>' + node.text + ' was enabled</p>');
                },
                onNodeCollapsed: function(event, node) {
                    $('#disabled-output').prepend('<p>' + node.text + ' was collapsed</p>');
                },
                onNodeUnchecked: function(event, node) {
                    $('#disabled-output').prepend('<p>' + node.text + ' was unchecked</p>');
                },
                onNodeUnselected: function(event, node) {
                    $('#disabled-output').prepend('<p>' + node.text + ' was unselected</p>');
                }
            });
            var findDisabledNodes = function() {
                return $disabledTree.treeview('search', [$('#input-disable-node').val(), {
                    ignoreCase: false,
                    exactMatch: false
                }]);
            };
            var disabledNodes = findDisabledNodes();
            // Expand/collapse/toggle nodes
            $('#input-disable-node').on('keyup', function(e) {
                disabledNodes = findDisabledNodes();
                $('.disable-node').prop('disabled', !(disabledNodes.length >= 1));
            });
            $('#btn-disable-node.disable-node').on('click', function(e) {
                $disabledTree.treeview('disableNode', [disabledNodes, {
                    silent: $('#chk-disable-silent').is(':checked')
                }]);
            });
            $('#btn-enable-node.disable-node').on('click', function(e) {
                $disabledTree.treeview('enableNode', [disabledNodes, {
                    silent: $('#chk-disable-silent').is(':checked')
                }]);
            });
            $('#btn-toggle-disabled.disable-node').on('click', function(e) {
                $disabledTree.treeview('toggleNodeDisabled', [disabledNodes, {
                    silent: $('#chk-disable-silent').is(':checked')
                }]);
            });
            // Expand/collapse all
            $('#btn-disable-all').on('click', function(e) {
                $disabledTree.treeview('disableAll', {
                    silent: $('#chk-disable-silent').is(':checked')
                });
            });
            $('#btn-enable-all').on('click', function(e) {
                $disabledTree.treeview('enableAll', {
                    silent: $('#chk-disable-silent').is(':checked')
                });
            });
            var $tree = $('#treeview12').treeview({
                data: json
            });
        });

    </script>
-->

    <% include footer %>
